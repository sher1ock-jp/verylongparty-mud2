"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClientStreamingMethod = void 0;
const nice_grpc_common_1 = require("nice-grpc-common");
const grpc_web_1 = require("@improbable-eng/grpc-web");
const abort_controller_x_1 = require("abort-controller-x");
const service_definitions_1 = require("../service-definitions");
const isAsyncIterable_1 = require("../utils/isAsyncIterable");
const convertMetadata_1 = require("../utils/convertMetadata");
/** @internal */
function createClientStreamingMethod(definition, channel, middleware, defaultOptions) {
    const grpcMethodDefinition = (0, service_definitions_1.toGrpcWebMethodDefinition)(definition);
    const methodDescriptor = {
        path: definition.path,
        requestStream: definition.requestStream,
        responseStream: definition.responseStream,
        options: definition.options,
    };
    async function* clientStreamingMethod(request, options) {
        if (!(0, isAsyncIterable_1.isAsyncIterable)(request)) {
            throw new Error('A middleware passed invalid request to next(): expected a single message for client streaming method');
        }
        const { metadata = (0, nice_grpc_common_1.Metadata)(), signal = new AbortController().signal, onHeader, onTrailer, } = options;
        return await (0, abort_controller_x_1.execute)(signal, (resolve, reject) => {
            const pipeAbortController = new AbortController();
            let response;
            const client = grpc_web_1.grpc.client(grpcMethodDefinition, {
                host: channel.address,
                transport: channel.transport,
            });
            client.onHeaders(headers => {
                onHeader === null || onHeader === void 0 ? void 0 : onHeader((0, convertMetadata_1.convertMetadataFromGrpcWeb)(headers));
            });
            client.onMessage(message => {
                response = message;
            });
            client.onEnd((code, message, trailers) => {
                onTrailer === null || onTrailer === void 0 ? void 0 : onTrailer((0, convertMetadata_1.convertMetadataFromGrpcWeb)(trailers));
                pipeAbortController.abort();
                if (code === grpc_web_1.grpc.Code.OK) {
                    resolve(response);
                }
                else {
                    reject(new nice_grpc_common_1.ClientError(definition.path, +code, message));
                }
            });
            client.start((0, convertMetadata_1.convertMetadataToGrpcWeb)(metadata));
            pipeRequest(pipeAbortController.signal, request, client, definition).then(() => {
                client.finishSend();
            }, err => {
                if (!(0, abort_controller_x_1.isAbortError)(err)) {
                    reject(err);
                    client.close();
                }
            });
            return () => {
                pipeAbortController.abort();
                client.close();
            };
        });
    }
    const method = middleware == null
        ? clientStreamingMethod
        : (request, options) => middleware({
            method: methodDescriptor,
            requestStream: true,
            request,
            responseStream: false,
            next: clientStreamingMethod,
        }, options);
    return async (request, options) => {
        const iterable = method(request, {
            ...defaultOptions,
            ...options,
        });
        const iterator = iterable[Symbol.asyncIterator]();
        let result = await iterator.next();
        while (true) {
            if (!result.done) {
                result = await iterator.throw(new Error('A middleware yielded a message, but expected to only return a message for client streaming method'));
                continue;
            }
            if (result.value == null) {
                result = await iterator.throw(new Error('A middleware returned void, but expected to return a message for client streaming method'));
                continue;
            }
            return result.value;
        }
    };
}
exports.createClientStreamingMethod = createClientStreamingMethod;
async function pipeRequest(signal, request, client, definition) {
    for await (const item of request) {
        (0, abort_controller_x_1.throwIfAborted)(signal);
        client.send({
            serializeBinary: () => definition.requestSerialize(item),
        });
    }
}
//# sourceMappingURL=createClientStreamingMethod.js.map