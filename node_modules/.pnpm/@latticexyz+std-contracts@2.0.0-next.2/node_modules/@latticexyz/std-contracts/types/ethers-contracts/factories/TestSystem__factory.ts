/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { TestSystem, TestSystemInterface } from "../TestSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "componentId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "entities",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "newValues",
        type: "bytes[]",
      },
    ],
    name: "executeTyped",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f1938038062000f1983398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b620002f017901c565b5050505062000292565b600062000126620001ef60201b620003811760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b610c7780620002a26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638da5cb5b1461007a578063a70c0db2146100a7578063f2fde38b146100bc575b600080fd5b61006461005f3660046106c3565b6100cf565b604051610071919061076e565b60405180910390f35b6100826101fd565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100ba6100b5366004610837565b610242565b005b6100ba6100ca3660046108fb565b610274565b60606000806000848060200190518101906100ea919061098c565b600080549396509194509250906101179073ffffffffffffffffffffffffffffffffffffffff16856103a5565b905060005b83518110156101e357600084828151811061013957610139610aa5565b60200260200101519050600084838151811061015757610157610aa5565b602002602001015190508373ffffffffffffffffffffffffffffffffffffffff16638b28294783836040518363ffffffff1660e01b815260040161019c929190610ad4565b600060405180830381600087803b1580156101b657600080fd5b505af11580156101ca573d6000803e3d6000fd5b50505050505080806101db90610aed565b91505061011c565b505060408051602081019091526000815295945050505050565b600061023d7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61026e83838360405160200161025a93929190610b4c565b6040516020818303038152906040526100cf565b50505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1633146102e4576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102ed816104f5565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261045b9190810190610c0c565b905080516000036104cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f742072656769737465726564000000000000000000000000000000604482015260640160405180910390fd5b6104ed816000815181106104e2576104e2610aa5565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516102ed928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561061f5761061f6105a9565b604052919050565b600067ffffffffffffffff821115610641576106416105a9565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261067e57600080fd5b813561069161068c82610627565b6105d8565b8181528460208386010111156106a657600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156106d557600080fd5b813567ffffffffffffffff8111156106ec57600080fd5b6104ed8482850161066d565b60005b838110156107135781810151838201526020016106fb565b8381111561026e5750506000910152565b6000815180845261073c8160208601602086016106f8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107816020830184610724565b9392505050565b600067ffffffffffffffff8211156107a2576107a26105a9565b5060051b60200190565b600082601f8301126107bd57600080fd5b813560206107cd61068c83610788565b82815260059290921b840181019181810190868411156107ec57600080fd5b8286015b8481101561082c57803567ffffffffffffffff8111156108105760008081fd5b61081e8986838b010161066d565b8452509183019183016107f0565b509695505050505050565b60008060006060848603121561084c57600080fd5b8335925060208085013567ffffffffffffffff8082111561086c57600080fd5b818701915087601f83011261088057600080fd5b813561088e61068c82610788565b81815260059190911b8301840190848101908a8311156108ad57600080fd5b938501935b828510156108cb578435825293850193908501906108b2565b9650505060408701359250808311156108e357600080fd5b50506108f1868287016107ac565b9150509250925092565b60006020828403121561090d57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461078157600080fd5b600082601f83011261094257600080fd5b8151602061095261068c83610788565b82815260059290921b8401810191818101908684111561097157600080fd5b8286015b8481101561082c5780518352918301918301610975565b6000806000606084860312156109a157600080fd5b8351925060208085015167ffffffffffffffff808211156109c157600080fd5b6109cd88838901610931565b94506040915081870151818111156109e457600080fd5b8701601f810189136109f557600080fd5b8051610a0361068c82610788565b81815260059190911b8201850190858101908b831115610a2257600080fd5b8684015b83811015610a9357805186811115610a3e5760008081fd5b8501603f81018e13610a505760008081fd5b88810151610a6061068c82610627565b8181528f8a838501011115610a755760008081fd5b610a84828c83018c86016106f8565b85525050918701918701610a26565b50809750505050505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8281526040602082015260006104ed6040830184610724565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b45577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b6000606082018583526020606081850152818651808452608086019150828801935060005b81811015610b8d57845183529383019391830191600101610b71565b5050848103604086015285518082528282019350600581901b8201830183880160005b83811015610bfc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403018752610bea838351610724565b96860196925090850190600101610bb0565b50909a9950505050505050505050565b600060208284031215610c1e57600080fd5b815167ffffffffffffffff811115610c3557600080fd5b6104ed8482850161093156fea2646970667358221220ab6e70571d0ca3b6d19498e887f15ad134575644d10d693bd9a31d3850d66b6e64736f6c634300080d0033";

type TestSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestSystem__factory extends ContractFactory {
  constructor(...args: TestSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<TestSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): TestSystem {
    return super.attach(address) as TestSystem;
  }
  override connect(signer: Signer): TestSystem__factory {
    return super.connect(signer) as TestSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestSystemInterface {
    return new utils.Interface(_abi) as TestSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestSystem {
    return new Contract(address, _abi, signerOrProvider) as TestSystem;
  }
}
