"use strict";
/*

    ./node_modules/.bin/ts-node src/tools/compileMacros.ts

*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const rootPath = path.resolve(__dirname, "../..");
function convertAsyncToSync(contents) {
    // Collapse union types.
    contents = contents.replace(/AsyncTupleStorageApi \| TupleStorageApi/g, "TupleStorageApi");
    contents = contents.replace(/TupleStorageApi \| AsyncTupleStorageApi/g, "TupleStorageApi");
    contents = contents.replace("const isSync = false", "const isSync = true");
    // Maintain camelcase
    contents = contents.replace(/async(.)/g, (x) => x.toLowerCase());
    // Promise.all
    contents = contents.replace(/Promise\.all/g, "");
    // Remove async
    contents = contents.replace(/[Aa]sync/g, "");
    contents = contents.replace(/await/g, "");
    // Return "Identity" to avoid having to parse matching brackets.
    contents = contents.replace(/Promise<([^>]+)>/g, "Identity<$1>");
    // Sync test assertions.
    contents = contents.replace(/assert\.rejects/g, "assert.throws");
    return contents;
}
function convertAsyncToSyncFile(inputPath, outputPath) {
    console.log(path.relative(rootPath, inputPath), "->", path.relative(rootPath, outputPath));
    let contents = fs.readFileSync(inputPath, "utf8");
    contents = convertAsyncToSync(contents);
    contents = `
/*

This file is generated from async/${path.parse(inputPath).base}

*/

type Identity<T> = T

${contents}
`;
    fs.writeFileSync(outputPath, contents);
    (0, child_process_1.execSync)(path.join(rootPath, "node_modules/.bin/organize-imports-cli") +
        " " +
        outputPath);
    (0, child_process_1.execSync)(path.join(rootPath, "node_modules/.bin/prettier") + " --write " + outputPath);
}
const asyncDir = path.join(rootPath, "src/database/async");
const syncDir = path.join(rootPath, "src/database/sync");
// Remove all non-test files
for (const fileName of fs.readdirSync(syncDir)) {
    if (!fileName.endsWith(".test.ts")) {
        fs.removeSync(path.join(syncDir, fileName));
    }
}
for (const fileName of fs.readdirSync(asyncDir)) {
    if (fileName.endsWith(".test.ts"))
        continue;
    if (!fileName.endsWith(".ts"))
        continue;
    convertAsyncToSyncFile(path.join(asyncDir, fileName), path.join(syncDir, convertAsyncToSync(fileName)));
}
//# sourceMappingURL=../../src/tools/compileMacros.js.map