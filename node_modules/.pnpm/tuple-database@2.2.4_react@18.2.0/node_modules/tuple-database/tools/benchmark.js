"use strict";
/*

    ./node_modules/.bin/ts-node src/tools/benchmark.ts

*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
const fs = __importStar(require("fs-extra"));
const level_1 = require("level");
const lodash_1 = require("lodash");
const path = __importStar(require("path"));
const AsyncTupleDatabase_1 = require("../database/async/AsyncTupleDatabase");
const transactionalReadWriteAsync_1 = require("../database/async/transactionalReadWriteAsync");
const main_1 = require("../main");
const LevelTupleStorage_1 = require("../storage/LevelTupleStorage");
const SQLiteTupleStorage_1 = require("../storage/SQLiteTupleStorage");
const iterations = 1000;
const writeIters = 100;
const readSize = 10;
const readIters = writeIters / readSize;
const tupleSize = 4;
function randomTuple() {
    return (0, lodash_1.range)(tupleSize).map(() => Math.random());
}
function randomObjectTuple() {
    return (0, lodash_1.range)(tupleSize).map(() => ({ value: Math.random() }));
}
function randomArrayTuple() {
    return (0, lodash_1.range)(tupleSize).map(() => [Math.random(), Math.random()]);
}
const initialDatabaseSize = 10000;
const seedReadRemoveWriteBench = (0, transactionalReadWriteAsync_1.transactionalReadWriteAsync)()(async (tx) => {
    for (const i of (0, lodash_1.range)(initialDatabaseSize)) {
        tx.set(randomTuple(), null);
    }
});
const readRemoveWrite = (0, transactionalReadWriteAsync_1.transactionalReadWriteAsync)()(async (tx) => {
    for (const i of (0, lodash_1.range)(readIters)) {
        const results = await tx.scan({ gt: randomTuple(), limit: 10 });
        for (const { key } of results) {
            tx.remove(key);
        }
    }
    for (const i of (0, lodash_1.range)(writeIters)) {
        tx.set(randomTuple(), null);
    }
});
const seedReadPerformanceBench = (0, transactionalReadWriteAsync_1.transactionalReadWriteAsync)()(async (tx) => {
    // seed simple tuples
    for (const i of (0, lodash_1.range)(initialDatabaseSize)) {
        tx.set(["simpleTuple", ...randomTuple()], null);
    }
    // seed complex tuples
    for (const i of (0, lodash_1.range)(initialDatabaseSize)) {
        tx.set(["objectTuple", ...randomObjectTuple()], null);
    }
    // seed complex tuples
    for (const i of (0, lodash_1.range)(initialDatabaseSize)) {
        tx.set(["arrayTuple", ...randomArrayTuple()], null);
    }
});
const readSimpleTuples = (0, transactionalReadWriteAsync_1.transactionalReadWriteAsync)()(async (tx) => {
    await tx.scan({ prefix: ["simpleTuple"], gte: [0], lt: [1] });
});
const readObjectTuples = (0, transactionalReadWriteAsync_1.transactionalReadWriteAsync)()(async (tx) => {
    await tx.scan({
        prefix: ["objectTuple"],
        gte: [{ value: 0 }],
        lt: [{ value: 1 }],
    });
});
const readArrayTuples = (0, transactionalReadWriteAsync_1.transactionalReadWriteAsync)()(async (tx) => {
    await tx.scan({
        prefix: ["arrayTuple"],
        gte: [[0, 0]],
        lt: [[1, 1]],
    });
});
async function timeIt(label, fn) {
    const start = performance.now();
    await fn();
    const end = performance.now();
    console.log(label, end - start);
}
async function asyncReadRemoveWriteBenchmark(label, db) {
    await timeIt(label + ":seedReadRemoveWriteBench", () => seedReadRemoveWriteBench(db));
    await timeIt(label + ":readRemoveWrite", async () => {
        for (const i of (0, lodash_1.range)(iterations)) {
            await readRemoveWrite(db);
        }
    });
}
async function asyncReadPerformanceBenchmark(label, db) {
    await timeIt(label + ":seedReadPerformanceBench", () => seedReadPerformanceBench(db));
    await timeIt(label + ":readSimpleTuples", async () => {
        for (const i of (0, lodash_1.range)(iterations)) {
            await readSimpleTuples(db);
        }
    });
    await timeIt(label + ":readObjectTuples", async () => {
        for (const i of (0, lodash_1.range)(iterations)) {
            await readObjectTuples(db);
        }
    });
    await timeIt(label + ":readArrayTuples", async () => {
        for (const i of (0, lodash_1.range)(iterations)) {
            await readArrayTuples(db);
        }
    });
}
const tmpDir = path.resolve(__dirname, "../../tmp");
async function main() {
    await fs.mkdirp(tmpDir);
    await asyncReadRemoveWriteBenchmark("AsyncTupleDatabase(InMemoryTupleStorage))", new main_1.AsyncTupleDatabaseClient(new AsyncTupleDatabase_1.AsyncTupleDatabase(new main_1.InMemoryTupleStorage())));
    await asyncReadPerformanceBenchmark("AsyncTupleDatabase(InMemoryTupleStorage))", new main_1.AsyncTupleDatabaseClient(new AsyncTupleDatabase_1.AsyncTupleDatabase(new main_1.InMemoryTupleStorage())));
    await asyncReadRemoveWriteBenchmark("AsyncTupleDatabase(SQLiteTupleStorage))", new main_1.AsyncTupleDatabaseClient(new AsyncTupleDatabase_1.AsyncTupleDatabase(new SQLiteTupleStorage_1.SQLiteTupleStorage((0, better_sqlite3_1.default)(path.join(tmpDir, "benchmark-sqlite.db"))))));
    await asyncReadRemoveWriteBenchmark("AsyncTupleDatabase(LevelTupleStorage))", new main_1.AsyncTupleDatabaseClient(new AsyncTupleDatabase_1.AsyncTupleDatabase(new LevelTupleStorage_1.LevelTupleStorage(new level_1.Level(path.join(tmpDir, "benchmark-level.db"))))));
}
main();
//# sourceMappingURL=../../src/tools/benchmark.js.map