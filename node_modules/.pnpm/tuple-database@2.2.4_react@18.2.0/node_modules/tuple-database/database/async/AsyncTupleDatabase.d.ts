import { KeyValuePair, ScanStorageArgs, WriteOps } from "../../storage/types";
import { ConcurrencyLog } from "../ConcurrencyLog";
import { TupleStorageApi } from "../sync/types";
import { TxId, Unsubscribe } from "../types";
import { AsyncReactivityTracker } from "./AsyncReactivityTracker";
import { AsyncCallback, AsyncTupleDatabaseApi, AsyncTupleStorageApi } from "./asyncTypes";
export declare class AsyncTupleDatabase implements AsyncTupleDatabaseApi {
    private storage;
    constructor(storage: TupleStorageApi | AsyncTupleStorageApi);
    log: ConcurrencyLog;
    reactivity: AsyncReactivityTracker;
    scan(args?: ScanStorageArgs, txId?: TxId): Promise<KeyValuePair[]>;
    subscribe(args: ScanStorageArgs, callback: AsyncCallback): Promise<Unsubscribe>;
    commit(writes: WriteOps, txId?: string): Promise<any>;
    cancel(txId: string): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=../../../src/database/async/AsyncTupleDatabase.d.ts.map