import { observable } from '@trpc/server/observable';
import { t as transformResult } from '../transformResult-7ab522e6.mjs';
import { T as TRPCClientError } from '../TRPCClientError-fef6cf44.mjs';
import { r as resolveHTTPLinkOptions, j as jsonHttpRequester } from '../httpUtils-1efcb902.mjs';

function httpLinkFactory(factoryOpts) {
    return (opts)=>{
        const resolvedOpts = resolveHTTPLinkOptions(opts);
        return (runtime)=>({ op  })=>observable((observer)=>{
                    const { path , input , type  } = op;
                    const { promise , cancel  } = factoryOpts.requester({
                        ...resolvedOpts,
                        runtime,
                        type,
                        path,
                        input,
                        headers () {
                            if (!opts.headers) {
                                return {};
                            }
                            if (typeof opts.headers === 'function') {
                                return opts.headers({
                                    op
                                });
                            }
                            return opts.headers;
                        }
                    });
                    let meta = undefined;
                    promise.then((res)=>{
                        meta = res.meta;
                        const transformed = transformResult(res.json, runtime);
                        if (!transformed.ok) {
                            observer.error(TRPCClientError.from(transformed.error, {
                                meta
                            }));
                            return;
                        }
                        observer.next({
                            context: res.meta,
                            result: transformed.result
                        });
                        observer.complete();
                    }).catch((cause)=>{
                        observer.error(TRPCClientError.from(cause, {
                            meta
                        }));
                    });
                    return ()=>{
                        cancel();
                    };
                });
    };
}
const httpLink = httpLinkFactory({
    requester: jsonHttpRequester
});

export { httpLink, httpLinkFactory };
