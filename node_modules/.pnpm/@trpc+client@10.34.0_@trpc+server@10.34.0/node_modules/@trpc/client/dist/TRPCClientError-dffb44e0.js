'use strict';

function isTRPCClientError(cause) {
    return cause instanceof TRPCClientError || /**
     * @deprecated
     * Delete in next major
     */ cause.name === 'TRPCClientError';
}
class TRPCClientError extends Error {
    static from(cause, opts = {}) {
        if (!(cause instanceof Error)) {
            return new TRPCClientError(cause.error.message ?? '', {
                ...opts,
                cause: undefined,
                result: cause
            });
        }
        if (isTRPCClientError(cause)) {
            if (opts.meta) {
                // Decorate with meta error data
                cause.meta = {
                    ...cause.meta,
                    ...opts.meta
                };
            }
            return cause;
        }
        return new TRPCClientError(cause.message, {
            ...opts,
            cause,
            result: null
        });
    }
    constructor(message, opts){
        const cause = opts?.cause;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore https://github.com/tc39/proposal-error-cause
        super(message, {
            cause
        });
        this.meta = opts?.meta;
        this.cause = cause;
        this.shape = opts?.result?.error;
        this.data = opts?.result?.error.data;
        this.name = 'TRPCClientError';
        Object.setPrototypeOf(this, TRPCClientError.prototype);
    }
}

exports.TRPCClientError = TRPCClientError;
