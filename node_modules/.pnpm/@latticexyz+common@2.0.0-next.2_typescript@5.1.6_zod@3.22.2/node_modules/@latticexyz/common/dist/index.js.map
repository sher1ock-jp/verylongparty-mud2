{"version":3,"sources":["../src/createBurnerAccount.ts","../src/createContract.ts","../src/createNonceManager.ts","../src/debug.ts","../src/hexToTableId.ts","../src/tableIdToHex.ts","../src/transportObserver.ts"],"sourcesContent":["import { Account, Hex } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\n\nexport function createBurnerAccount(privateKey: Hex): Account {\n  const account = privateKeyToAccount(privateKey);\n  // We may override account features here\n  return {\n    ...account,\n  };\n}\n","import {\n  Abi,\n  Account,\n  Address,\n  Chain,\n  GetContractParameters,\n  GetContractReturnType,\n  Hex,\n  PublicClient,\n  SimulateContractParameters,\n  Transport,\n  WalletClient,\n  WriteContractParameters,\n  getContract,\n} from \"viem\";\nimport pRetry from \"p-retry\";\nimport { createNonceManager } from \"./createNonceManager\";\nimport { debug as parentDebug } from \"./debug\";\nimport { UnionOmit } from \"./type-utils/common\";\n\nconst debug = parentDebug.extend(\"createContract\");\n\n// copied from viem because this isn't exported\n// TODO: import from viem?\nfunction getFunctionParameters(values: [args?: readonly unknown[], options?: object]): {\n  args: readonly unknown[];\n  options: object;\n} {\n  const hasArgs = values.length && Array.isArray(values[0]);\n  const args = hasArgs ? values[0]! : [];\n  const options = (hasArgs ? values[1] : values[0]) ?? {};\n  return { args, options };\n}\n\nexport type ContractWrite = {\n  id: string;\n  request: WriteContractParameters;\n  result: Promise<Hex>;\n};\n\nexport type CreateContractOptions<\n  TTransport extends Transport,\n  TAddress extends Address,\n  TAbi extends Abi,\n  TChain extends Chain,\n  TAccount extends Account,\n  TPublicClient extends PublicClient<TTransport, TChain>,\n  TWalletClient extends WalletClient<TTransport, TChain, TAccount>\n> = Required<GetContractParameters<TTransport, TChain, TAccount, TAbi, TPublicClient, TWalletClient, TAddress>> & {\n  onWrite?: (write: ContractWrite) => void;\n};\n\nexport function createContract<\n  TTransport extends Transport,\n  TAddress extends Address,\n  TAbi extends Abi,\n  TChain extends Chain,\n  TAccount extends Account,\n  TPublicClient extends PublicClient<TTransport, TChain>,\n  TWalletClient extends WalletClient<TTransport, TChain, TAccount>\n>({\n  abi,\n  address,\n  publicClient,\n  walletClient,\n  onWrite,\n}: CreateContractOptions<\n  TTransport,\n  TAddress,\n  TAbi,\n  TChain,\n  TAccount,\n  TPublicClient,\n  TWalletClient\n>): GetContractReturnType<TAbi, TPublicClient, TWalletClient, TAddress> {\n  const contract = getContract<TTransport, TAddress, TAbi, TChain, TAccount, TPublicClient, TWalletClient>({\n    abi,\n    address,\n    publicClient,\n    walletClient,\n  }) as unknown as GetContractReturnType<Abi, PublicClient, WalletClient>;\n\n  if (contract.write) {\n    let nextWriteId = 0;\n    const nonceManager = createNonceManager({\n      publicClient: publicClient as PublicClient,\n      address: walletClient.account.address,\n    });\n\n    // Replace write calls with our own proxy. Implemented ~the same as viem, but adds better handling of nonces (via queue + retries).\n    contract.write = new Proxy(\n      {},\n      {\n        get(_, functionName: string): GetContractReturnType<Abi, PublicClient, WalletClient>[\"write\"][string] {\n          async function prepareWrite(\n            options: WriteContractParameters\n          ): Promise<WriteContractParameters<TAbi, typeof functionName, TChain, TAccount>> {\n            if (options.gas) {\n              debug(\"gas provided, skipping simulate\", functionName, options);\n              return options as unknown as WriteContractParameters<TAbi, typeof functionName, TChain, TAccount>;\n            }\n\n            debug(\"simulating write\", functionName, options);\n            const { request } = await publicClient.simulateContract({\n              ...options,\n              account: options.account ?? walletClient.account,\n            } as unknown as SimulateContractParameters<TAbi, typeof functionName, TChain>);\n\n            return request as unknown as WriteContractParameters<TAbi, typeof functionName, TChain, TAccount>;\n          }\n\n          async function write(options: WriteContractParameters): Promise<Hex> {\n            const preparedWrite = await prepareWrite(options);\n\n            return await pRetry(\n              async () => {\n                if (!nonceManager.hasNonce()) {\n                  await nonceManager.resetNonce();\n                }\n\n                const nonce = nonceManager.nextNonce();\n                debug(\"calling write function with nonce\", nonce, preparedWrite);\n                return await walletClient.writeContract({\n                  nonce,\n                  ...preparedWrite,\n                });\n              },\n              {\n                retries: 3,\n                onFailedAttempt: async (error) => {\n                  // On nonce errors, reset the nonce and retry\n                  if (nonceManager.shouldResetNonce(error)) {\n                    debug(\"got nonce error, retrying\", error);\n                    await nonceManager.resetNonce();\n                    return;\n                  }\n                  // TODO: prepareWrite again if there are gas errors?\n                  throw error;\n                },\n              }\n            );\n          }\n\n          return (...parameters) => {\n            const id = `${walletClient.chain.id}:${walletClient.account.address}:${nextWriteId++}`;\n            const { args, options } = <\n              {\n                args: unknown[];\n                options: UnionOmit<WriteContractParameters, \"address\" | \"abi\" | \"functionName\" | \"args\">;\n              }\n            >getFunctionParameters(parameters as any);\n\n            const request = {\n              address,\n              abi,\n              functionName,\n              args,\n              ...options,\n            };\n\n            const result = write(request);\n\n            onWrite?.({ id, request, result });\n\n            return result;\n          };\n        },\n      }\n    );\n  }\n\n  return contract as unknown as GetContractReturnType<TAbi, TPublicClient, TWalletClient, TAddress>;\n}\n","import {\n  BaseError,\n  BlockTag,\n  Hex,\n  NonceTooHighError,\n  NonceTooLowError,\n  PublicClient,\n  TransactionExecutionError,\n} from \"viem\";\nimport { debug as parentDebug } from \"./debug\";\n\nconst debug = parentDebug.extend(\"createNonceManager\");\n\ntype CreateNonceManagerOptions = {\n  publicClient: PublicClient;\n  address: Hex;\n  blockTag?: BlockTag;\n};\n\ntype CreateNonceManagerResult = {\n  hasNonce: () => boolean;\n  nextNonce: () => number;\n  resetNonce: () => Promise<void>;\n  shouldResetNonce: (error: unknown) => boolean;\n};\n\nexport function createNonceManager({\n  publicClient,\n  address,\n  blockTag,\n}: CreateNonceManagerOptions): CreateNonceManagerResult {\n  const nonceRef = { current: -1 };\n  const channel =\n    typeof BroadcastChannel !== \"undefined\"\n      ? // TODO: fetch chain ID or require it via types?\n        new BroadcastChannel(`mud:createNonceManager:${publicClient.chain?.id}:${address}`)\n      : null;\n\n  if (channel) {\n    channel.addEventListener(\"message\", (event) => {\n      const nonce = JSON.parse(event.data);\n      debug(\"got nonce from broadcast channel\", nonce);\n      nonceRef.current = nonce;\n    });\n  }\n\n  function hasNonce(): boolean {\n    return nonceRef.current >= 0;\n  }\n\n  function nextNonce(): number {\n    if (!hasNonce()) throw new Error(\"call resetNonce before using nextNonce\");\n    const nonce = nonceRef.current++;\n    channel?.postMessage(JSON.stringify(nonceRef.current));\n    return nonce;\n  }\n\n  async function resetNonce(): Promise<void> {\n    const nonce = await publicClient.getTransactionCount({ address, blockTag });\n    nonceRef.current = nonce;\n    channel?.postMessage(JSON.stringify(nonceRef.current));\n    debug(\"reset nonce to\", nonceRef.current);\n  }\n\n  function shouldResetNonce(error: unknown): boolean {\n    return (\n      error instanceof BaseError &&\n      error.walk((e) => e instanceof NonceTooLowError || e instanceof NonceTooHighError) != null\n    );\n  }\n\n  return {\n    hasNonce,\n    nextNonce,\n    resetNonce,\n    shouldResetNonce,\n  };\n}\n","import createDebug from \"debug\";\n\nexport const debug = createDebug(\"mud:common\");\n","import { Hex, hexToString, sliceHex } from \"viem\";\n\nexport function hexToTableId(hex: Hex): { namespace: string; name: string } {\n  const namespace = hexToString(sliceHex(hex, 0, 16)).replace(/\\0+$/, \"\");\n  const name = hexToString(sliceHex(hex, 16, 32)).replace(/\\0+$/, \"\");\n  return { namespace, name };\n}\n","import { Hex, stringToHex, concatHex } from \"viem\";\n\nexport function tableIdToHex(namespace: string, name: string): Hex {\n  return concatHex([\n    stringToHex(namespace.substring(0, 16), { size: 16 }),\n    stringToHex(name.substring(0, 16), { size: 16 }),\n  ]);\n}\n","import { Hex, Transport, keccak256 } from \"viem\";\nimport { debug as parentDebug } from \"./debug\";\n\nconst debug = parentDebug.extend(\"transportObserver\");\n\nexport function transportObserver<TTransport extends Transport>(transport: TTransport): TTransport {\n  return ((opts) => {\n    const result = transport(opts);\n    const request: typeof result.request = async (req) => {\n      if (req.method === \"eth_sendRawTransaction\" && req.params instanceof Array) {\n        const txs = req.params.map((data: Hex) => keccak256(data));\n        debug(\"saw txs\", txs);\n        // TODO: pass these tx hashes into dev tools\n      }\n      // TODO: add support for `eth_sendTransaction`\n      return result.request(req);\n    };\n    return {\n      ...result,\n      request,\n    };\n  }) as TTransport;\n}\n"],"mappings":"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","names":["privateKeyToAccount","createBurnerAccount","privateKey","getContract","pRetry","BaseError","NonceTooHighError","NonceTooLowError","createDebug","debug","debug","createNonceManager","publicClient","address","blockTag","nonceRef","channel","event","nonce","hasNonce","nextNonce","resetNonce","shouldResetNonce","error","BaseError","e","NonceTooLowError","NonceTooHighError","debug","getFunctionParameters","values","hasArgs","args","options","createContract","abi","address","publicClient","walletClient","onWrite","contract","getContract","nextWriteId","nonceManager","createNonceManager","_","functionName","prepareWrite","request","write","preparedWrite","pRetry","nonce","error","parameters","id","result","hexToString","sliceHex","hexToTableId","hex","namespace","name","stringToHex","concatHex","tableIdToHex","namespace","name","keccak256","debug","transportObserver","transport","opts","result","req","txs","data","keccak256"]}