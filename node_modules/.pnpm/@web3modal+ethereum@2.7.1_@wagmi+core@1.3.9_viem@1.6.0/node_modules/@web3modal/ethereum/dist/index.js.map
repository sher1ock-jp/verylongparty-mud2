{"version":3,"file":"index.js","sources":["../src/client.ts","../src/utils.ts"],"sourcesContent":["import type { Chain, Config, ConnectArgs, Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAvatar,\n  fetchEnsName,\n  getAccount,\n  getNetwork,\n  switchNetwork,\n  watchAccount,\n  watchNetwork\n} from '@wagmi/core'\nimport type { ConnectorId } from './types'\n\n// -- helpers ------------------------------------------- //\nconst ADD_ETH_CHAIN_METHOD = 'wallet_addEthereumChain'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Config\n\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n  }\n\n  // -- private ------------------------------------------- //\n  private getWalletConnectConnector() {\n    const connector = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n\n    if (!connector) {\n      throw new Error('WalletConnectConnector is required')\n    }\n\n    return connector\n  }\n\n  private async connectWalletConnectProvider(connector: Connector, onUri: (uri: string) => void) {\n    await connector.getProvider()\n\n    return new Promise<void>(resolve => {\n      connector.once('message', event => {\n        if (event.type === 'display_uri') {\n          onUri(event.data as string)\n          resolve()\n        }\n      })\n    })\n  }\n\n  // -- public web3modal ---------------------------------- //\n  public namespace = 'eip155'\n\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public getConnectors() {\n    const connectors = this.wagmi.connectors.filter(\n      connector => !connector.id.includes('walletConnect')\n    )\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, chainId?: number) {\n    const connector = this.getWalletConnectConnector()\n    const options: ConnectArgs = { connector }\n    if (chainId) {\n      options.chainId = chainId\n    }\n\n    return Promise.all([connect(options), this.connectWalletConnectProvider(connector, onUri)])\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, chainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const options: ConnectArgs = { connector }\n    if (chainId) {\n      options.chainId = chainId\n    }\n    const data = await connect(options)\n\n    return data\n  }\n\n  public isInjectedProviderInstalled() {\n    // @ts-expect-error - ethereum can exist\n    return typeof window.ethereum !== 'undefined'\n  }\n\n  public safeCheckInjectedProvider(providerId: string) {\n    try {\n      const stringId = String(providerId)\n\n      // @ts-expect-error - Structure is correct\n      return Boolean(window.ethereum?.[stringId])\n    } catch (err) {\n      console.error(err)\n\n      return false\n    }\n  }\n\n  public async getConnectedChainIds() {\n    const connector = this.getWalletConnectConnector()\n    const provider = await connector.getProvider()\n    const sessionNamespaces = provider.signer?.session?.namespaces\n    const sessionMethods = sessionNamespaces?.[this.namespace]?.methods\n\n    if (sessionMethods?.includes(ADD_ETH_CHAIN_METHOD)) {\n      return 'ALL'\n    }\n\n    if (sessionNamespaces) {\n      const sessionAccounts: string[] = []\n      Object.keys(sessionNamespaces).forEach(namespaceKey => {\n        if (namespaceKey.includes(this.namespace)) {\n          sessionAccounts.push(...sessionNamespaces[namespaceKey].accounts)\n        }\n      })\n      const sessionChains = sessionAccounts?.map((a: string) => a.split(':')[1])\n\n      return sessionChains\n    }\n\n    return 'ALL'\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n\n  public fetchBalance = fetchBalance\n\n  public getNetwork = getNetwork\n\n  public watchNetwork = watchNetwork\n\n  public switchNetwork = switchNetwork\n\n  // -- public web3modal (optional) ----------------------- //\n  public fetchEnsName = fetchEnsName\n\n  public fetchEnsAvatar = fetchEnsAvatar\n}\n","import { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport type { Chain } from '@wagmi/core'\nimport { InjectedConnector } from '@wagmi/core'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\nexport const BLOCKCHAIN_API = 'https://rpc.walletconnect.com'\n\n// -- providers ------------------------------------------------------- //\nexport function w3mProvider<C extends Chain>({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider<C>({\n    rpc: chain => {\n      const supportedChains = [\n        1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 280, 324, 420, 42161, 42220, 43114, 80001, 421611,\n        421613, 1313161554, 1313161555\n      ]\n\n      if (supportedChains.includes(chain.id)) {\n        return {\n          http: `${BLOCKCHAIN_API}/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n        }\n      }\n\n      return {\n        http: chain.rpcUrls.default.http[0],\n        webSocket: chain.rpcUrls.default.webSocket?.[0]\n      }\n    }\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function w3mConnectors({ chains, projectId }: ModalConnectorsOpts) {\n  return [\n    new WalletConnectConnector({\n      chains,\n      options: { projectId, showQrModal: false }\n    }),\n    new InjectedConnector({ chains, options: { shimDisconnect: true } })\n  ]\n}\n"],"names":["ADD_ETH_CHAIN_METHOD","EthereumClient","wagmi","chains","disconnect","getAccount","watchAccount","fetchBalance","getNetwork","watchNetwork","switchNetwork","fetchEnsName","fetchEnsAvatar","connector","c","onUri","resolve","event","id","item","chainId","options","connect","connectorId","providerId","_a","stringId","err","_b","_c","sessionNamespaces","sessionMethods","sessionAccounts","namespaceKey","a","NAMESPACE","BLOCKCHAIN_API","w3mProvider","projectId","jsonRpcProvider","chain","w3mConnectors","WalletConnectConnector","InjectedConnector"],"mappings":"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"}