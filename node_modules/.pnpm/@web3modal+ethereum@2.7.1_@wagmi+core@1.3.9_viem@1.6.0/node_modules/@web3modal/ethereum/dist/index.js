import{disconnect as h,getAccount as l,watchAccount as d,fetchBalance as u,getNetwork as w,watchNetwork as p,switchNetwork as m,fetchEnsName as C,fetchEnsAvatar as f,connect as a,InjectedConnector as g}from"@wagmi/core";import{WalletConnectConnector as v}from"@wagmi/core/connectors/walletConnect";import{jsonRpcProvider as I}from"@wagmi/core/providers/jsonRpc";const A="wallet_addEthereumChain";class j{constructor(t,e){this.wagmi={},this.chains=[],this.namespace="eip155",this.disconnect=h,this.getAccount=l,this.watchAccount=d,this.fetchBalance=u,this.getNetwork=w,this.watchNetwork=p,this.switchNetwork=m,this.fetchEnsName=C,this.fetchEnsAvatar=f,this.wagmi=t,this.chains=e}getWalletConnectConnector(){const t=this.wagmi.connectors.find(e=>e.id==="walletConnect");if(!t)throw new Error("WalletConnectConnector is required");return t}async connectWalletConnectProvider(t,e){return await t.getProvider(),new Promise(n=>{t.once("message",o=>{o.type==="display_uri"&&(e(o.data),n())})})}getConnectorById(t){const e=this.wagmi.connectors.find(n=>n.id===t);if(!e)throw new Error(`Connector for id ${t} was not found`);return e}getConnectors(){return this.wagmi.connectors.filter(t=>!t.id.includes("walletConnect"))}async connectWalletConnect(t,e){const n=this.getWalletConnectConnector(),o={connector:n};return e&&(o.chainId=e),Promise.all([a(o),this.connectWalletConnectProvider(n,t)])}async connectConnector(t,e){const n={connector:this.getConnectorById(t)};return e&&(n.chainId=e),await a(n)}isInjectedProviderInstalled(){return typeof window.ethereum<"u"}safeCheckInjectedProvider(t){var e;try{const n=String(t);return Boolean((e=window.ethereum)==null?void 0:e[n])}catch(n){return console.error(n),!1}}async getConnectedChainIds(){var t,e,n;const o=(e=(t=(await this.getWalletConnectConnector().getProvider()).signer)==null?void 0:t.session)==null?void 0:e.namespaces,s=(n=o?.[this.namespace])==null?void 0:n.methods;if(s!=null&&s.includes(A))return"ALL";if(o){const i=[];return Object.keys(o).forEach(r=>{r.includes(this.namespace)&&i.push(...o[r].accounts)}),i?.map(r=>r.split(":")[1])}return"ALL"}}const P="eip155",y="https://rpc.walletconnect.com";function W({projectId:c}){return I({rpc:t=>{var e;return[1,3,4,5,10,42,56,69,97,100,137,280,324,420,42161,42220,43114,80001,421611,421613,1313161554,1313161555].includes(t.id)?{http:`${y}/v1/?chainId=${P}:${t.id}&projectId=${c}`}:{http:t.rpcUrls.default.http[0],webSocket:(e=t.rpcUrls.default.webSocket)==null?void 0:e[0]}}})}function B({chains:c,projectId:t}){return[new v({chains:c,options:{projectId:t,showQrModal:!1}}),new g({chains:c,options:{shimDisconnect:!0}})]}export{j as EthereumClient,B as w3mConnectors,W as w3mProvider};
//# sourceMappingURL=index.js.map
