"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseReferentialBinaryOperation = exports.parseReferentialComparison = exports.parseValueBinaryOperation = exports.parseValueBinaryOperationOrExpression = exports.parseFilter = void 0;
const binary_operation_node_js_1 = require("../operation-node/binary-operation-node.js");
const object_utils_js_1 = require("../util/object-utils.js");
const operation_node_source_js_1 = require("../operation-node/operation-node-source.js");
const operator_node_js_1 = require("../operation-node/operator-node.js");
const reference_parser_js_1 = require("./reference-parser.js");
const value_parser_js_1 = require("./value-parser.js");
const value_node_js_1 = require("../operation-node/value-node.js");
const expression_js_1 = require("../expression/expression.js");
const expression_builder_js_1 = require("../expression/expression-builder.js");
function parseFilter(args) {
    if (args.length > 1 && !isComparisonOperatorExpression(args[1])) {
        throw new Error(`invalid comparison operator ${JSON.stringify(args[1])}`);
    }
    return parseValueBinaryOperationOrExpression(args);
}
exports.parseFilter = parseFilter;
function parseValueBinaryOperationOrExpression(args) {
    if (args.length === 3) {
        return parseValueBinaryOperation(args[0], args[1], args[2]);
    }
    else if (args.length === 1) {
        return parseExpressionOrFactory(args[0]);
    }
    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);
}
exports.parseValueBinaryOperationOrExpression = parseValueBinaryOperationOrExpression;
function parseValueBinaryOperation(leftOperand, operator, rightOperand) {
    if (!isBinaryOperatorExpression(operator)) {
        throw new Error(`invalid binary operator ${JSON.stringify(operator)}`);
    }
    if (isIsOperator(operator) && isNullOrBoolean(rightOperand)) {
        return parseIs(leftOperand, operator, rightOperand);
    }
    return binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(leftOperand), parseOperator(operator), (0, value_parser_js_1.parseValueExpressionOrList)(rightOperand));
}
exports.parseValueBinaryOperation = parseValueBinaryOperation;
function parseReferentialComparison(leftOperand, operator, rightOperand) {
    if (!isComparisonOperatorExpression(operator)) {
        throw new Error(`invalid comparison operator ${JSON.stringify(operator)}`);
    }
    return parseReferentialBinaryOperation(leftOperand, operator, rightOperand);
}
exports.parseReferentialComparison = parseReferentialComparison;
function parseReferentialBinaryOperation(leftOperand, operator, rightOperand) {
    if (!isBinaryOperatorExpression(operator)) {
        throw new Error(`invalid binary operator ${JSON.stringify(operator)}`);
    }
    return binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(leftOperand), parseOperator(operator), (0, reference_parser_js_1.parseReferenceExpression)(rightOperand));
}
exports.parseReferentialBinaryOperation = parseReferentialBinaryOperation;
function isBinaryOperatorExpression(expr) {
    return (0, operator_node_js_1.isBinaryOperator)(expr) || (0, expression_js_1.isExpression)(expr);
}
function isComparisonOperatorExpression(expr) {
    return (0, operator_node_js_1.isComparisonOperator)(expr) || (0, expression_js_1.isExpression)(expr);
}
function isIsOperator(operator) {
    return operator === 'is' || operator === 'is not';
}
function isNullOrBoolean(value) {
    return (0, object_utils_js_1.isNull)(value) || (0, object_utils_js_1.isBoolean)(value);
}
function parseIs(leftOperand, operator, rightOperand) {
    return binary_operation_node_js_1.BinaryOperationNode.create((0, reference_parser_js_1.parseReferenceExpression)(leftOperand), parseOperator(operator), value_node_js_1.ValueNode.createImmediate(rightOperand));
}
function parseOperator(operator) {
    if ((0, object_utils_js_1.isString)(operator) && operator_node_js_1.OPERATORS.includes(operator)) {
        return operator_node_js_1.OperatorNode.create(operator);
    }
    if ((0, operation_node_source_js_1.isOperationNodeSource)(operator)) {
        return operator.toOperationNode();
    }
    throw new Error(`invalid operator ${JSON.stringify(operator)}`);
}
function parseExpressionOrFactory(arg) {
    if ((0, object_utils_js_1.isFunction)(arg)) {
        return arg((0, expression_builder_js_1.createExpressionBuilder)()).toOperationNode();
    }
    else if ((0, operation_node_source_js_1.isOperationNodeSource)(arg)) {
        return arg.toOperationNode();
    }
    return value_node_js_1.ValueNode.create(arg);
}
