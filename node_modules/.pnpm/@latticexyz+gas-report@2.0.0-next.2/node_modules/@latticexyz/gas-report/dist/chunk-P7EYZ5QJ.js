import{readFileSync as G,writeFileSync as b}from"fs";import{execa as v}from"execa";import r from"chalk";import{table as E,getBorderCharacters as w}from"table";import U from"strip-ansi";var C={command:"gas-report",describe:"Create a gas report",builder(a){return a.options({save:{type:"string",desc:"Save the gas report to a file"},compare:{type:"string",desc:"Compare to an existing gas report"}})},async handler({save:a,compare:e}){let s;try{s=await y()}catch(l){console.error(l),setTimeout(()=>process.exit());return}if(e)try{let l=JSON.parse(G(e,"utf8"));s=s.map(c=>{let t=l.find(n=>n.file===c.file&&n.name===c.name);return{...c,prevGasUsed:t?.gasUsed}})}catch{console.log(r.red(`Gas report to compare not found: ${e}`)),e=void 0}S(s,e),a&&x(s,a),process.exit(0)}},L=C;async function y(){console.log("Running gas report");let a=[],e;try{e=(await v("forge",["test","-vvv"],{stdio:["inherit","pipe","inherit"],env:{GAS_REPORTER_ENABLED:"true"}})).stdout}catch(o){throw console.log(o.stdout??o),console.log(r.red(`
-----------
Error while running the gas report (see above)`)),o}let s=e.split(`
`).map(U),l=/^\s*GAS REPORT: (\d+) (.*)$/,c=/^\[(?:PASS|FAIL).*\] (\w+)\(\)/,t=/^Running \d+ tests? for (.*):(.*)$/;function n(o,i=s.length-1){for(let d=i;d>=0;d--){let p=s[d];if(o.test(p))return d}return-1}for(let o=0;o<s.length;o++){let i=s[o].match(l);if(!i)continue;let d=parseInt(i[1]),p=i[2],g=n(c,o);if(g===-1)throw new Error("Could not find nearest test function, did `forge test` output change?");let u=n(t,g);if(u===-1)throw new Error("Could not find nearest test filename, did `forge test` output change?");let f=s[g].match(c);if(!f)throw new Error("Could not parse test function name, did `forge test` output change?");let m=s[u].match(t);if(!m)throw new Error("Could not parse test filename, did `forge test` output change?");let h=f[1],R=m[1];a.push({file:R,test:h,name:p,gasUsed:d})}return a.sort((o,i)=>o.file.localeCompare(i.file)),a}function S(a,e){e&&console.log(r.bold(`Gas report compared to ${e}`));let s=[r.bold("File"),r.bold("Test"),r.bold("Name"),r.bold("Gas used"),...e?[r.bold("Prev gas used"),r.bold("Difference")]:[]],l=a.map(t=>{let n=t.prevGasUsed?t.gasUsed-t.prevGasUsed:0,o=n>0?r.red(`+${n}`):n<0?r.green(`${n}`):n,i=e?[t.prevGasUsed??"n/a",o]:[],d=n>0?r.red(t.gasUsed):n<0?r.green(t.gasUsed):t.gasUsed;return[t.file,t.test,t.name,d,...i]}),c=[s,...l];console.log(E(c,{border:w("norc")}))}function x(a,e){console.log(r.bold(`Saving gas report to ${e}`)),b(e,`${JSON.stringify(a,null,2)}
`)}export{L as a};
//# sourceMappingURL=chunk-P7EYZ5QJ.js.map