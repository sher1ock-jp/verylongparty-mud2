import { e as entityKind } from './alias-3e926a50.mjs';
export { bN as BaseName, C as Column, b5 as ColumnAliasProxyHandler, L as ColumnBuilder, bL as Columns, bP as ExtraConfigBuilder, bz as FakePrimitiveParam, bO as IsAlias, bv as Many, bC as Name, bu as One, bM as OriginalName, b as Param, bH as Placeholder, Q as QueryPromise, R as Relation, b6 as RelationTableAliasProxyHandler, bt as Relations, S as SQL, bK as Schema, j as SelectionProxyHandler, bB as StringChunk, q as Subquery, r as SubqueryConfig, T as Table, M as TableAliasProxyHandler, bJ as TableName, V as View, u as ViewBaseConfig, W as WithSubquery, x as aliasedRelation, G as aliasedTable, w as aliasedTableColumn, E as and, K as applyMixins, br as asc, bl as between, b8 as bindIfParam, by as createMany, bx as createOne, c as createTableRelationsHelpers, bs as desc, H as eq, bj as exists, a as extractTablesRelationalConfig, f as fillPlaceholders, l as getTableColumns, J as getTableLikeName, p as getTableName, bb as gt, bc as gte, b7 as hasOwnEntityKind, bR as iife, bp as ilike, bf as inArray, i as is, bD as isDriverValueEncoder, bi as isNotNull, bh as isNull, bA as isSQLWrapper, bQ as isTable, bn as like, bd as lt, be as lte, y as mapColumnsInAliasedSQLToAlias, A as mapColumnsInSQLToAlias, g as mapRelationalRow, m as mapResultRow, d as mapUpdateSet, n as name, b9 as ne, bE as noopDecoder, bF as noopEncoder, bG as noopMapper, D as normalizeRelation, ba as not, bm as notBetween, bk as notExists, bq as notIlike, bg as notInArray, bo as notLike, z as operators, F as or, B as orderByOperators, o as orderSelectedFields, v as param, bI as placeholder, bw as relations, s as sql } from './alias-3e926a50.mjs';
export { D as DrizzleError, T as TransactionRollbackError } from './errors-fed11085.mjs';

class ConsoleLogWriter {
    static [entityKind] = 'ConsoleLogWriter';
    write(message) {
        console.log(message);
    }
}
class DefaultLogger {
    static [entityKind] = 'DefaultLogger';
    writer;
    constructor(config) {
        this.writer = config?.writer ?? new ConsoleLogWriter();
    }
    logQuery(query, params) {
        const stringifiedParams = params.map((p) => {
            try {
                return JSON.stringify(p);
            }
            catch {
                return String(p);
            }
        });
        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';
        this.writer.write(`Query: ${query}${paramsStr}`);
    }
}
class NoopLogger {
    static [entityKind] = 'NoopLogger';
    logQuery() {
        // noop
    }
}

export { ConsoleLogWriter, DefaultLogger, NoopLogger, entityKind };
//# sourceMappingURL=index.mjs.map
