import { types } from '@neondatabase/serverless';
import { e as entityKind, f as fillPlaceholders, m as mapResultRow, a as extractTablesRelationalConfig, c as createTableRelationsHelpers, P as PgDialect } from '../alias-3e926a50.mjs';
import { NoopLogger, DefaultLogger } from '../index.mjs';
import { P as PreparedQuery, a as PgSession, b as PgTransaction, c as PgDatabase } from '../session-2062e9e6.mjs';
import '../errors-fed11085.mjs';

class NeonHttpPreparedQuery extends PreparedQuery {
    client;
    queryString;
    params;
    logger;
    fields;
    name;
    customResultMapper;
    static [entityKind] = 'NeonHttpPreparedQuery';
    rawQuery;
    query;
    constructor(client, queryString, params, logger, fields, name, customResultMapper) {
        super();
        this.client = client;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.name = name;
        this.customResultMapper = customResultMapper;
        this.rawQuery = {
            arrayMode: false,
            fullResults: true,
        };
        this.query = { arrayMode: true, fullResults: true };
    }
    async execute(placeholderValues = {}) {
        const params = fillPlaceholders(this.params, placeholderValues);
        this.logger.logQuery(this.queryString, params);
        const { fields, client, queryString, query, rawQuery, joinsNotNullableMap, customResultMapper } = this;
        if (!fields && !customResultMapper) {
            return client(queryString, params, rawQuery);
        }
        const result = await client(queryString, params, query);
        return customResultMapper
            ? customResultMapper(result.rows)
            : result.rows.map((row) => mapResultRow(fields, row, joinsNotNullableMap));
    }
    all(placeholderValues = {}) {
        const params = fillPlaceholders(this.params, placeholderValues);
        this.logger.logQuery(this.queryString, params);
        return this.client(this.queryString, params, this.rawQuery).then((result) => result.rows);
    }
    values(placeholderValues = {}) {
        const params = fillPlaceholders(this.params, placeholderValues);
        this.logger.logQuery(this.queryString, params);
        return this.client(this.queryString, params).then((result) => result.rows);
    }
}
class NeonHttpSession extends PgSession {
    client;
    schema;
    options;
    static [entityKind] = 'NeonHttpSession';
    logger;
    constructor(client, dialect, schema, options = {}) {
        super(dialect);
        this.client = client;
        this.schema = schema;
        this.options = options;
        this.logger = options.logger ?? new NoopLogger();
    }
    prepareQuery(query, fields, name, customResultMapper) {
        return new NeonHttpPreparedQuery(this.client, query.sql, query.params, this.logger, fields, name, customResultMapper);
    }
    // change return type to QueryRows<true>
    async query(query, params) {
        this.logger.logQuery(query, params);
        const result = await this.client(query, params, { arrayMode: true });
        return result;
    }
    // change return type to QueryRows<false>
    async queryObjects(query, params) {
        return this.client(query, params);
    }
    async transaction(_transaction, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _config = {}) {
        throw new Error('No transactions support in neon-http driver');
    }
}
class NeonTransaction extends PgTransaction {
    static [entityKind] = 'NeonHttpTransaction';
    async transaction(_transaction) {
        throw new Error('No transactions support in neon-http driver');
        // const savepointName = `sp${this.nestedIndex + 1}`;
        // const tx = new NeonTransaction(this.dialect, this.session, this.schema, this.nestedIndex + 1);
        // await tx.execute(sql.raw(`savepoint ${savepointName}`));
        // try {
        // 	const result = await transaction(tx);
        // 	await tx.execute(sql.raw(`release savepoint ${savepointName}`));
        // 	return result;
        // } catch (e) {
        // 	await tx.execute(sql.raw(`rollback to savepoint ${savepointName}`));
        // 	throw e;
        // }
    }
}

class NeonHttpDriver {
    client;
    dialect;
    options;
    static [entityKind] = 'NeonDriver';
    constructor(client, dialect, options = {}) {
        this.client = client;
        this.dialect = dialect;
        this.options = options;
        this.initMappers();
    }
    createSession(schema) {
        return new NeonHttpSession(this.client, this.dialect, schema, { logger: this.options.logger });
    }
    initMappers() {
        types.setTypeParser(types.builtins.TIMESTAMPTZ, (val) => val);
        types.setTypeParser(types.builtins.TIMESTAMP, (val) => val);
        types.setTypeParser(types.builtins.DATE, (val) => val);
    }
}
function drizzle(client, config = {}) {
    const dialect = new PgDialect();
    let logger;
    if (config.logger === true) {
        logger = new DefaultLogger();
    }
    else if (config.logger !== false) {
        logger = config.logger;
    }
    let schema;
    if (config.schema) {
        const tablesConfig = extractTablesRelationalConfig(config.schema, createTableRelationsHelpers);
        schema = {
            fullSchema: config.schema,
            schema: tablesConfig.tables,
            tableNamesMap: tablesConfig.tableNamesMap,
        };
    }
    const driver = new NeonHttpDriver(client, dialect, { logger });
    const session = driver.createSession(schema);
    return new PgDatabase(dialect, session, schema);
}

export { NeonHttpDriver, NeonHttpPreparedQuery, NeonHttpSession, NeonTransaction, drizzle };
//# sourceMappingURL=index.mjs.map
