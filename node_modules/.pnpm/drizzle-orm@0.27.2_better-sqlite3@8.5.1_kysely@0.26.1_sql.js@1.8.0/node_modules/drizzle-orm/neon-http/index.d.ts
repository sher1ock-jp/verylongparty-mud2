import { e as entityKind, L as Logger, Q as Query, aD as Assume, D as DrizzleConfig } from '../column.d-aa4e525d.js';
import { am as PreparedQueryConfig, an as PreparedQuery, ab as SelectedFieldsOrdered, ap as PgSession, u as PgDialect, ao as PgTransactionConfig, aq as PgTransaction, ar as QueryResultHKT, t as PgDatabase } from '../db.d-b9835153.js';
import { T as TablesRelationalConfig, R as RelationalSchemaConfig } from '../query-promise.d-0dd411fc.js';
import { FullQueryResults, QueryRows } from '@neondatabase/serverless';
import '../migrator.js';
import '../select.types.d-eff54486.js';

type NeonHttpClient = {
    <A extends boolean = false, F extends boolean = true>(strings: string, params?: any[], mode?: {
        arrayMode?: A;
        fullResults?: F;
    }): Promise<F extends true ? FullQueryResults<A> : QueryRows<A>>;
};
declare class NeonHttpPreparedQuery<T extends PreparedQueryConfig> extends PreparedQuery<T> {
    private client;
    private queryString;
    private params;
    private logger;
    private fields;
    private name;
    private customResultMapper?;
    static readonly [entityKind]: string;
    private rawQuery;
    private query;
    constructor(client: NeonHttpClient, queryString: string, params: unknown[], logger: Logger, fields: SelectedFieldsOrdered | undefined, name: string | undefined, customResultMapper?: ((rows: unknown[][]) => T['execute']) | undefined);
    execute(placeholderValues?: Record<string, unknown> | undefined): Promise<T['execute']>;
    all(placeholderValues?: Record<string, unknown> | undefined): Promise<T['all']>;
    values(placeholderValues?: Record<string, unknown> | undefined): Promise<T['values']>;
}
interface NeonHttpSessionOptions {
    logger?: Logger;
}
declare class NeonHttpSession<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends PgSession<NeonHttpQueryResultHKT, TFullSchema, TSchema> {
    private client;
    private schema;
    private options;
    static readonly [entityKind]: string;
    private logger;
    constructor(client: NeonHttpClient, dialect: PgDialect, schema: RelationalSchemaConfig<TSchema> | undefined, options?: NeonHttpSessionOptions);
    prepareQuery<T extends PreparedQueryConfig = PreparedQueryConfig>(query: Query, fields: SelectedFieldsOrdered | undefined, name: string | undefined, customResultMapper?: (rows: unknown[][]) => T['execute']): PreparedQuery<T>;
    query(query: string, params: unknown[]): Promise<FullQueryResults<true>>;
    queryObjects(query: string, params: unknown[]): Promise<FullQueryResults<false>>;
    transaction<T>(_transaction: (tx: NeonTransaction<TFullSchema, TSchema>) => Promise<T>, _config?: PgTransactionConfig): Promise<T>;
}
declare class NeonTransaction<TFullSchema extends Record<string, unknown>, TSchema extends TablesRelationalConfig> extends PgTransaction<NeonHttpQueryResultHKT, TFullSchema, TSchema> {
    static readonly [entityKind]: string;
    transaction<T>(_transaction: (tx: NeonTransaction<TFullSchema, TSchema>) => Promise<T>): Promise<T>;
}
interface NeonHttpQueryResultHKT extends QueryResultHKT {
    type: FullQueryResults<Assume<this['row'], boolean>>;
}

interface NeonDriverOptions {
    logger?: Logger;
}
declare class NeonHttpDriver {
    private client;
    private dialect;
    private options;
    static readonly [entityKind]: string;
    constructor(client: NeonHttpClient, dialect: PgDialect, options?: NeonDriverOptions);
    createSession(schema: RelationalSchemaConfig<TablesRelationalConfig> | undefined): NeonHttpSession<Record<string, unknown>, TablesRelationalConfig>;
    initMappers(): void;
}
type NeonHttpDatabase<TSchema extends Record<string, unknown> = Record<string, never>> = PgDatabase<NeonHttpQueryResultHKT, TSchema>;
declare function drizzle<TSchema extends Record<string, unknown> = Record<string, never>>(client: NeonHttpClient, config?: DrizzleConfig<TSchema>): NeonHttpDatabase<TSchema>;

export { NeonDriverOptions, NeonHttpClient, NeonHttpDatabase, NeonHttpDriver, NeonHttpPreparedQuery, NeonHttpQueryResultHKT, NeonHttpSession, NeonHttpSessionOptions, NeonTransaction, drizzle };
