'use strict';

var alias = require('./alias-72a4082c.cjs');

var _a, _b, _c;
class ConsoleLogWriter {
    write(message) {
        console.log(message);
    }
}
_a = alias.entityKind;
ConsoleLogWriter[_a] = 'ConsoleLogWriter';
class DefaultLogger {
    constructor(config) {
        this.writer = config?.writer ?? new ConsoleLogWriter();
    }
    logQuery(query, params) {
        const stringifiedParams = params.map((p) => {
            try {
                return JSON.stringify(p);
            }
            catch {
                return String(p);
            }
        });
        const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(', ')}]` : '';
        this.writer.write(`Query: ${query}${paramsStr}`);
    }
}
_b = alias.entityKind;
DefaultLogger[_b] = 'DefaultLogger';
class NoopLogger {
    logQuery() {
        // noop
    }
}
_c = alias.entityKind;
NoopLogger[_c] = 'NoopLogger';

exports.BaseName = alias.BaseName;
exports.Column = alias.Column;
exports.ColumnAliasProxyHandler = alias.ColumnAliasProxyHandler;
exports.ColumnBuilder = alias.ColumnBuilder;
exports.Columns = alias.Columns;
exports.DrizzleError = alias.DrizzleError;
exports.ExtraConfigBuilder = alias.ExtraConfigBuilder;
exports.FakePrimitiveParam = alias.FakePrimitiveParam;
exports.IsAlias = alias.IsAlias;
exports.Many = alias.Many;
exports.Name = alias.Name;
exports.One = alias.One;
exports.OriginalName = alias.OriginalName;
exports.Param = alias.Param;
exports.Placeholder = alias.Placeholder;
exports.QueryPromise = alias.QueryPromise;
exports.Relation = alias.Relation;
exports.RelationTableAliasProxyHandler = alias.RelationTableAliasProxyHandler;
exports.Relations = alias.Relations;
Object.defineProperty(exports, 'SQL', {
    enumerable: true,
    get: function () { return alias.SQL; }
});
exports.Schema = alias.Schema;
exports.SelectionProxyHandler = alias.SelectionProxyHandler;
exports.StringChunk = alias.StringChunk;
exports.Subquery = alias.Subquery;
exports.SubqueryConfig = alias.SubqueryConfig;
exports.Table = alias.Table;
exports.TableAliasProxyHandler = alias.TableAliasProxyHandler;
exports.TableName = alias.TableName;
exports.TransactionRollbackError = alias.TransactionRollbackError;
exports.View = alias.View;
exports.ViewBaseConfig = alias.ViewBaseConfig;
exports.WithSubquery = alias.WithSubquery;
exports.aliasedRelation = alias.aliasedRelation;
exports.aliasedTable = alias.aliasedTable;
exports.aliasedTableColumn = alias.aliasedTableColumn;
exports.and = alias.and;
exports.applyMixins = alias.applyMixins;
exports.asc = alias.asc;
exports.between = alias.between;
exports.bindIfParam = alias.bindIfParam;
exports.createMany = alias.createMany;
exports.createOne = alias.createOne;
exports.createTableRelationsHelpers = alias.createTableRelationsHelpers;
exports.desc = alias.desc;
exports.entityKind = alias.entityKind;
exports.eq = alias.eq;
exports.exists = alias.exists;
exports.extractTablesRelationalConfig = alias.extractTablesRelationalConfig;
exports.fillPlaceholders = alias.fillPlaceholders;
exports.getTableColumns = alias.getTableColumns;
exports.getTableLikeName = alias.getTableLikeName;
exports.getTableName = alias.getTableName;
exports.gt = alias.gt;
exports.gte = alias.gte;
exports.hasOwnEntityKind = alias.hasOwnEntityKind;
exports.iife = alias.iife;
exports.ilike = alias.ilike;
exports.inArray = alias.inArray;
exports.is = alias.is;
exports.isDriverValueEncoder = alias.isDriverValueEncoder;
exports.isNotNull = alias.isNotNull;
exports.isNull = alias.isNull;
exports.isSQLWrapper = alias.isSQLWrapper;
exports.isTable = alias.isTable;
exports.like = alias.like;
exports.lt = alias.lt;
exports.lte = alias.lte;
exports.mapColumnsInAliasedSQLToAlias = alias.mapColumnsInAliasedSQLToAlias;
exports.mapColumnsInSQLToAlias = alias.mapColumnsInSQLToAlias;
exports.mapRelationalRow = alias.mapRelationalRow;
exports.mapResultRow = alias.mapResultRow;
exports.mapUpdateSet = alias.mapUpdateSet;
exports.name = alias.name;
exports.ne = alias.ne;
exports.noopDecoder = alias.noopDecoder;
exports.noopEncoder = alias.noopEncoder;
exports.noopMapper = alias.noopMapper;
exports.normalizeRelation = alias.normalizeRelation;
exports.not = alias.not;
exports.notBetween = alias.notBetween;
exports.notExists = alias.notExists;
exports.notIlike = alias.notIlike;
exports.notInArray = alias.notInArray;
exports.notLike = alias.notLike;
exports.operators = alias.operators;
exports.or = alias.or;
exports.orderByOperators = alias.orderByOperators;
exports.orderSelectedFields = alias.orderSelectedFields;
exports.param = alias.param;
exports.placeholder = alias.placeholder;
exports.relations = alias.relations;
Object.defineProperty(exports, 'sql', {
    enumerable: true,
    get: function () { return alias.sql; }
});
exports.ConsoleLogWriter = ConsoleLogWriter;
exports.DefaultLogger = DefaultLogger;
exports.NoopLogger = NoopLogger;
//# sourceMappingURL=index.cjs.map
