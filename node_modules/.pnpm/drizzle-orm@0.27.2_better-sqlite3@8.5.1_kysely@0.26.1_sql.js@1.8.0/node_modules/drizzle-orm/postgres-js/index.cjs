'use strict';

var index = require('../index.cjs');
var alias = require('../alias-72a4082c.cjs');

var _a, _b, _c;
class PostgresJsPreparedQuery extends alias.PreparedQuery {
    constructor(client, query, params, logger, fields, customResultMapper) {
        super();
        this.client = client;
        this.query = query;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.customResultMapper = customResultMapper;
    }
    async execute(placeholderValues = {}) {
        return alias.tracer.startActiveSpan('drizzle.execute', async (span) => {
            const params = alias.fillPlaceholders(this.params, placeholderValues);
            span?.setAttributes({
                'drizzle.query.text': this.query,
                'drizzle.query.params': JSON.stringify(params),
            });
            this.logger.logQuery(this.query, params);
            const { fields, query, client, joinsNotNullableMap, customResultMapper } = this;
            if (!fields && !customResultMapper) {
                return alias.tracer.startActiveSpan('drizzle.driver.execute', () => {
                    return client.unsafe(query, params);
                });
            }
            const rows = await alias.tracer.startActiveSpan('drizzle.driver.execute', () => {
                span?.setAttributes({
                    'drizzle.query.text': query,
                    'drizzle.query.params': JSON.stringify(params),
                });
                return client.unsafe(query, params).values();
            });
            return alias.tracer.startActiveSpan('drizzle.mapResponse', () => {
                return customResultMapper
                    ? customResultMapper(rows)
                    : rows.map((row) => alias.mapResultRow(fields, row, joinsNotNullableMap));
            });
        });
    }
    all(placeholderValues = {}) {
        return alias.tracer.startActiveSpan('drizzle.execute', async (span) => {
            const params = alias.fillPlaceholders(this.params, placeholderValues);
            span?.setAttributes({
                'drizzle.query.text': this.query,
                'drizzle.query.params': JSON.stringify(params),
            });
            this.logger.logQuery(this.query, params);
            return alias.tracer.startActiveSpan('drizzle.driver.execute', () => {
                span?.setAttributes({
                    'drizzle.query.text': this.query,
                    'drizzle.query.params': JSON.stringify(params),
                });
                return this.client.unsafe(this.query, params);
            });
        });
    }
}
_a = alias.entityKind;
PostgresJsPreparedQuery[_a] = 'PostgresJsPreparedQuery';
class PostgresJsSession extends alias.PgSession {
    constructor(client, dialect, schema, 
    /** @internal */
    options = {}) {
        super(dialect);
        this.client = client;
        this.schema = schema;
        this.options = options;
        this.logger = options.logger ?? new index.NoopLogger();
    }
    prepareQuery(query, fields, name, customResultMapper) {
        return new PostgresJsPreparedQuery(this.client, query.sql, query.params, this.logger, fields, customResultMapper);
    }
    query(query, params) {
        this.logger.logQuery(query, params);
        return this.client.unsafe(query, params).values();
    }
    queryObjects(query, params) {
        return this.client.unsafe(query, params);
    }
    transaction(transaction, config) {
        return this.client.begin(async (client) => {
            const session = new PostgresJsSession(client, this.dialect, this.schema, this.options);
            const tx = new PostgresJsTransaction(this.dialect, session, this.schema);
            if (config) {
                await tx.setTransaction(config);
            }
            return transaction(tx);
        });
    }
}
_b = alias.entityKind;
PostgresJsSession[_b] = 'PostgresJsSession';
class PostgresJsTransaction extends alias.PgTransaction {
    constructor(dialect, 
    /** @internal */
    session, schema, nestedIndex = 0) {
        super(dialect, session, schema, nestedIndex);
        this.session = session;
    }
    transaction(transaction) {
        return this.session.client.savepoint((client) => {
            const session = new PostgresJsSession(client, this.dialect, this.schema, this.session.options);
            const tx = new PostgresJsTransaction(this.dialect, session, this.schema);
            return transaction(tx);
        });
    }
}
_c = alias.entityKind;
PostgresJsTransaction[_c] = 'PostgresJsTransaction';

function drizzle(client, config = {}) {
    const dialect = new alias.PgDialect();
    let logger;
    if (config.logger === true) {
        logger = new index.DefaultLogger();
    }
    else if (config.logger !== false) {
        logger = config.logger;
    }
    let schema;
    if (config.schema) {
        const tablesConfig = alias.extractTablesRelationalConfig(config.schema, alias.createTableRelationsHelpers);
        schema = {
            fullSchema: config.schema,
            schema: tablesConfig.tables,
            tableNamesMap: tablesConfig.tableNamesMap,
        };
    }
    const session = new PostgresJsSession(client, dialect, schema, { logger });
    return new alias.PgDatabase(dialect, session, schema);
}

exports.PostgresJsPreparedQuery = PostgresJsPreparedQuery;
exports.PostgresJsSession = PostgresJsSession;
exports.PostgresJsTransaction = PostgresJsTransaction;
exports.drizzle = drizzle;
//# sourceMappingURL=index.cjs.map
