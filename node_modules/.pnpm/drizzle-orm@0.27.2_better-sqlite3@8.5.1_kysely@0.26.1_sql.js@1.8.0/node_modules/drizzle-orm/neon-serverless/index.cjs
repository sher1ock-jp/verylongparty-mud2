'use strict';

var serverless = require('@neondatabase/serverless');
var alias = require('../alias-72a4082c.cjs');
var index = require('../index.cjs');

var _a$1, _b, _c;
class NeonPreparedQuery extends alias.PreparedQuery {
    constructor(client, queryString, params, logger, fields, name, customResultMapper) {
        super();
        this.client = client;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
        this.customResultMapper = customResultMapper;
        this.rawQuery = {
            name,
            text: queryString,
        };
        this.query = {
            name,
            text: queryString,
            rowMode: 'array',
        };
    }
    async execute(placeholderValues = {}) {
        const params = alias.fillPlaceholders(this.params, placeholderValues);
        this.logger.logQuery(this.rawQuery.text, params);
        const { fields, client, rawQuery, query, joinsNotNullableMap, customResultMapper } = this;
        if (!fields && !customResultMapper) {
            return client.query(rawQuery, params);
        }
        const result = await client.query(query, params);
        return customResultMapper
            ? customResultMapper(result.rows)
            : result.rows.map((row) => alias.mapResultRow(fields, row, joinsNotNullableMap));
    }
    all(placeholderValues = {}) {
        const params = alias.fillPlaceholders(this.params, placeholderValues);
        this.logger.logQuery(this.rawQuery.text, params);
        return this.client.query(this.rawQuery, params).then((result) => result.rows);
    }
    values(placeholderValues = {}) {
        const params = alias.fillPlaceholders(this.params, placeholderValues);
        this.logger.logQuery(this.rawQuery.text, params);
        return this.client.query(this.query, params).then((result) => result.rows);
    }
}
_a$1 = alias.entityKind;
NeonPreparedQuery[_a$1] = 'NeonPreparedQuery';
class NeonSession extends alias.PgSession {
    constructor(client, dialect, schema, options = {}) {
        super(dialect);
        this.client = client;
        this.schema = schema;
        this.options = options;
        this.logger = options.logger ?? new index.NoopLogger();
    }
    prepareQuery(query, fields, name, customResultMapper) {
        return new NeonPreparedQuery(this.client, query.sql, query.params, this.logger, fields, name, customResultMapper);
    }
    async query(query, params) {
        this.logger.logQuery(query, params);
        const result = await this.client.query({
            rowMode: 'array',
            text: query,
            values: params,
        });
        return result;
    }
    async queryObjects(query, params) {
        return this.client.query(query, params);
    }
    async transaction(transaction, config = {}) {
        const session = this.client instanceof serverless.Pool // eslint-disable-line no-instanceof/no-instanceof
            ? new NeonSession(await this.client.connect(), this.dialect, this.schema, this.options)
            : this;
        const tx = new NeonTransaction(this.dialect, session, this.schema);
        await tx.execute(alias.sql `begin ${tx.getTransactionConfigSQL(config)}`);
        try {
            const result = await transaction(tx);
            await tx.execute(alias.sql `commit`);
            return result;
        }
        catch (error) {
            await tx.execute(alias.sql `rollback`);
            throw error;
        }
        finally {
            if (this.client instanceof serverless.Pool) { // eslint-disable-line no-instanceof/no-instanceof
                session.client.release();
            }
        }
    }
}
_b = alias.entityKind;
NeonSession[_b] = 'NeonSession';
class NeonTransaction extends alias.PgTransaction {
    async transaction(transaction) {
        const savepointName = `sp${this.nestedIndex + 1}`;
        const tx = new NeonTransaction(this.dialect, this.session, this.schema, this.nestedIndex + 1);
        await tx.execute(alias.sql.raw(`savepoint ${savepointName}`));
        try {
            const result = await transaction(tx);
            await tx.execute(alias.sql.raw(`release savepoint ${savepointName}`));
            return result;
        }
        catch (e) {
            await tx.execute(alias.sql.raw(`rollback to savepoint ${savepointName}`));
            throw e;
        }
    }
}
_c = alias.entityKind;
NeonTransaction[_c] = 'NeonTransaction';

var _a;
class NeonDriver {
    constructor(client, dialect, options = {}) {
        this.client = client;
        this.dialect = dialect;
        this.options = options;
        this.initMappers();
    }
    createSession(schema) {
        return new NeonSession(this.client, this.dialect, schema, { logger: this.options.logger });
    }
    initMappers() {
        serverless.types.setTypeParser(serverless.types.builtins.TIMESTAMPTZ, (val) => val);
        serverless.types.setTypeParser(serverless.types.builtins.TIMESTAMP, (val) => val);
        serverless.types.setTypeParser(serverless.types.builtins.DATE, (val) => val);
    }
}
_a = alias.entityKind;
NeonDriver[_a] = 'NeonDriver';
function drizzle(client, config = {}) {
    const dialect = new alias.PgDialect();
    let logger;
    if (config.logger === true) {
        logger = new index.DefaultLogger();
    }
    else if (config.logger !== false) {
        logger = config.logger;
    }
    let schema;
    if (config.schema) {
        const tablesConfig = alias.extractTablesRelationalConfig(config.schema, alias.createTableRelationsHelpers);
        schema = {
            fullSchema: config.schema,
            schema: tablesConfig.tables,
            tableNamesMap: tablesConfig.tableNamesMap,
        };
    }
    const driver = new NeonDriver(client, dialect, { logger });
    const session = driver.createSession(schema);
    return new alias.PgDatabase(dialect, session, schema);
}

exports.NeonDriver = NeonDriver;
exports.NeonPreparedQuery = NeonPreparedQuery;
exports.NeonSession = NeonSession;
exports.NeonTransaction = NeonTransaction;
exports.drizzle = drizzle;
//# sourceMappingURL=index.cjs.map
