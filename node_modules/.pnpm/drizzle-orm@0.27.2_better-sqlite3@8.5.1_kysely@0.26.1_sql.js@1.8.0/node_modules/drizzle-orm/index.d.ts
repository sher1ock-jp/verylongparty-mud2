import { A as AnyColumn, e as entityKind, T as Table, V as View, a as SQL } from './column.d-aa4e525d.js';
export { t as AnyColumnBuilder, h as AnyColumnHKT, i as AnyColumnHKTBase, j as AnyColumnKind, as as AnyTable, at as AnyTableHKT, au as AnyTableHKTBase, av as AnyTableKind, aD as Assume, B as BuildColumn, v as BuildColumns, $ as BuildQueryConfig, w as ChangeColumnTableName, _ as Chunk, g as Column, C as ColumnBaseConfig, s as ColumnBuilder, l as ColumnBuilderBaseConfig, m as ColumnBuilderConfig, q as ColumnBuilderHKT, o as ColumnBuilderHKTBase, p as ColumnBuilderKind, r as ColumnBuilderRuntimeConfig, b as ColumnConfig, f as ColumnHKT, c as ColumnHKTBase, d as ColumnKind, aQ as ColumnsSelection, aM as ColumnsWithTable, H as ConsoleLogWriter, J as DefaultLogger, a7 as DriverValueDecoder, a8 as DriverValueEncoder, ac as DriverValueMapper, D as DrizzleConfig, y as DrizzleEntity, z as DrizzleEntityClass, aF as DrizzleTypeError, aE as Equal, Z as FakePrimitiveParam, G as GetColumnData, a4 as GetDecoderResult, aI as IfThenElse, k as InferColumnsDataTypes, I as InferModel, ax as InferModelFromColumns, aN as KnownKeysOnly, F as LogWriter, L as Logger, n as MakeColumnConfig, M as MapColumnName, a5 as Name, N as NoopLogger, az as OneOrMany, O as OptionalKeyOnly, aH as Or, ae as Param, ai as Placeholder, aJ as PromiseOf, Q as Query, a0 as QueryTypingsValue, R as RequiredKeyOnly, ag as SQLChunk, a1 as SQLWrapper, X as SelectedFields, K as SelectedFieldsFlat, P as SelectedFieldsFlatFull, Y as SelectedFieldsOrdered, ao as SelectionProxyHandler, S as Simplify, aB as SimplifyOptions, aC as SimplifyShallow, a3 as StringChunk, am as Subquery, al as SubqueryConfig, ap as TableConfig, aA as Update, u as UpdateCBConfig, U as UpdateColConfig, ay as UpdateSet, aq as UpdateTableConfig, aG as ValueOrArray, aP as ViewBaseConfig, W as WithEnum, an as WithSubquery, aK as Writable, ak as fillPlaceholders, aL as getTableColumns, aw as getTableName, x as hasOwnEntityKind, aO as iife, E as is, a9 as isDriverValueEncoder, a2 as isSQLWrapper, ar as isTable, a6 as name, aa as noopDecoder, ab as noopEncoder, ad as noopMapper, af as param, aj as placeholder, ah as sql } from './column.d-aa4e525d.js';
import { a as Relation } from './query-promise.d-0dd411fc.js';
export { U as BuildQueryResult, P as BuildRelationResult, a2 as BuildRelationalQueryResult, J as DBQueryConfig, B as ExtractObjectValues, C as ExtractRelationsFromTableExtraConfigSchema, E as ExtractTableRelationsFromSchema, L as ExtractTablesWithRelations, I as FindTableByDBName, M as Many, S as NonUndefinedKeysOnly, _ as NormalizedRelation, O as One, F as Operators, H as OrderByOperators, Q as QueryPromise, V as RelationConfig, R as RelationalSchemaConfig, z as Relations, N as ReturnTypeOrValue, K as TableRelationalConfig, a1 as TableRelationsHelpers, A as TableRelationsKeysOnly, T as TablesRelationalConfig, c as and, x as asc, r as between, b as bindIfParam, Z as createMany, Y as createOne, a0 as createTableRelationsHelpers, y as desc, e as eq, p as exists, W as extractTablesRelationalConfig, g as gt, f as gte, v as ilike, i as inArray, m as isNotNull, k as isNull, t as like, l as lt, h as lte, a3 as mapRelationalRow, n as ne, $ as normalizeRelation, d as not, s as notBetween, q as notExists, w as notIlike, j as notInArray, u as notLike, D as operators, o as or, G as orderByOperators, X as relations } from './query-promise.d-0dd411fc.js';

declare class ColumnAliasProxyHandler<TColumn extends AnyColumn> implements ProxyHandler<TColumn> {
    private table;
    static readonly [entityKind]: string;
    constructor(table: Table | View);
    get(columnObj: TColumn, prop: string | symbol): any;
}
declare class TableAliasProxyHandler<T extends Table | View> implements ProxyHandler<T> {
    private alias;
    private replaceOriginalName;
    static readonly [entityKind]: string;
    constructor(alias: string, replaceOriginalName: boolean);
    get(target: T, prop: string | symbol): any;
}
declare class RelationTableAliasProxyHandler<T extends Relation> implements ProxyHandler<T> {
    private alias;
    static readonly [entityKind]: string;
    constructor(alias: string);
    get(target: T, prop: string | symbol): any;
}
declare function aliasedTable<T extends Table>(table: T, tableAlias: string): T;
declare function aliasedRelation<T extends Relation>(relation: T, tableAlias: string): T;
declare function aliasedTableColumn<T extends AnyColumn>(column: T, tableAlias: string): T;
declare function mapColumnsInAliasedSQLToAlias(query: SQL.Aliased, alias: string): SQL.Aliased;
declare function mapColumnsInSQLToAlias(query: SQL, alias: string): SQL;

declare class DrizzleError extends Error {
    static readonly [entityKind]: string;
    constructor(message: string);
    static wrap(error: unknown, message?: string): DrizzleError;
}
declare class TransactionRollbackError extends DrizzleError {
    static readonly [entityKind]: string;
    constructor();
}

export { AnyColumn, ColumnAliasProxyHandler, DrizzleError, Relation, RelationTableAliasProxyHandler, SQL, Table, TableAliasProxyHandler, TransactionRollbackError, View, aliasedRelation, aliasedTable, aliasedTableColumn, entityKind, mapColumnsInAliasedSQLToAlias, mapColumnsInSQLToAlias };
