{"version":3,"sources":["../mud.config.ts"],"sourcesContent":["import { mudConfig } from \"./ts/register\";\n\nexport default mudConfig({\n  worldImportPath: \"../\",\n  worldgenDirectory: \"interfaces\",\n  worldInterfaceName: \"IBaseWorld\",\n  codegenDirectory: \"\",\n  tables: {\n    /************************************************************************\n     *\n     *    CORE TABLES\n     *\n     ************************************************************************/\n    NamespaceOwner: {\n      keySchema: {\n        namespace: \"bytes16\",\n      },\n      schema: {\n        owner: \"address\",\n      },\n    },\n    ResourceAccess: {\n      keySchema: {\n        resourceSelector: \"bytes32\",\n        caller: \"address\",\n      },\n      schema: {\n        access: \"bool\",\n      },\n    },\n    InstalledModules: {\n      keySchema: {\n        moduleName: \"bytes16\",\n        argumentsHash: \"bytes32\", // Hash of the params passed to the `install` function\n      },\n      schema: {\n        moduleAddress: \"address\",\n      },\n      // TODO: this is a workaround to use `getRecord` instead of `getField` in the autogen library,\n      // to allow using the table before it is registered. This is because `getRecord` passes the schema\n      // to store, while `getField` loads it from storage. Remove this once we have support for passing the\n      // schema in `getField` too. (See https://github.com/latticexyz/mud/issues/444)\n      dataStruct: true,\n    },\n    /************************************************************************\n     *\n     *    MODULE TABLES\n     *\n     ************************************************************************/\n    Systems: {\n      directory: \"modules/core/tables\",\n      keySchema: {\n        resourceSelector: \"bytes32\",\n      },\n      schema: {\n        system: \"address\",\n        publicAccess: \"bool\",\n      },\n      dataStruct: false,\n    },\n    SystemRegistry: {\n      directory: \"modules/core/tables\",\n      keySchema: {\n        system: \"address\",\n      },\n      schema: {\n        resourceSelector: \"bytes32\",\n      },\n    },\n    SystemHooks: {\n      directory: \"modules/core/tables\",\n      keySchema: {\n        resourceSelector: \"bytes32\",\n      },\n      schema: \"address[]\",\n    },\n    ResourceType: {\n      directory: \"modules/core/tables\",\n      keySchema: {\n        resourceSelector: \"bytes32\",\n      },\n      schema: {\n        resourceType: \"Resource\",\n      },\n    },\n    FunctionSelectors: {\n      directory: \"modules/core/tables\",\n      keySchema: {\n        functionSelector: \"bytes4\",\n      },\n      schema: {\n        namespace: \"bytes16\",\n        name: \"bytes16\",\n        systemFunctionSelector: \"bytes4\",\n      },\n      dataStruct: false,\n    },\n    KeysWithValue: {\n      directory: \"modules/keyswithvalue/tables\",\n      keySchema: {\n        valueHash: \"bytes32\",\n      },\n      schema: {\n        keysWithValue: \"bytes32[]\", // For now only supports 1 key per value\n      },\n      tableIdArgument: true,\n    },\n    KeysInTable: {\n      directory: \"modules/keysintable/tables\",\n      keySchema: { sourceTable: \"bytes32\" },\n      schema: {\n        keys0: \"bytes32[]\",\n        keys1: \"bytes32[]\",\n        keys2: \"bytes32[]\",\n        keys3: \"bytes32[]\",\n        keys4: \"bytes32[]\",\n      },\n    },\n    UsedKeysIndex: {\n      directory: \"modules/keysintable/tables\",\n      keySchema: {\n        sourceTable: \"bytes32\",\n        keysHash: \"bytes32\",\n      },\n      schema: { has: \"bool\", index: \"uint40\" },\n      dataStruct: false,\n    },\n    UniqueEntity: {\n      directory: \"modules/uniqueentity/tables\",\n      keySchema: {},\n      schema: \"uint256\",\n      tableIdArgument: true,\n      storeArgument: true,\n    },\n    /************************************************************************\n     *\n     *    TEST TABLES\n     *\n     ************************************************************************/\n    Bool: {\n      directory: \"../test/tables\",\n      keySchema: {},\n      schema: {\n        value: \"bool\",\n      },\n      tableIdArgument: true,\n    },\n    AddressArray: {\n      directory: \"../test/tables\",\n      schema: \"address[]\",\n      tableIdArgument: true,\n    },\n  },\n  enums: {\n    Resource: [\"NONE\", \"NAMESPACE\", \"TABLE\", \"SYSTEM\"],\n  },\n\n  excludeSystems: [\n    // IUniqueEntitySystem is not part of the root namespace and\n    // installed separately by UniqueEntityModule.\n    // TODO: Move optional modules into a separate package\n    // (see https://github.com/latticexyz/mud/pull/584)\n    \"UniqueEntitySystem\",\n\n    \"SnapSyncSystem\",\n\n    // Worldgen currently does not support systems inheriting logic\n    // from other contracts, so all parts of CoreSystem are named\n    // System too to be included in the IBaseWorld interface.\n    // However, IStoreRegistrationSystem overlaps with IStore if\n    // included in IBaseWorld, so it needs to be excluded from worldgen.\n    // TODO: add support for inheritance to worldgen\n    // (see: https://github.com/latticexyz/mud/issues/631)\n    \"StoreRegistrationSystem\",\n    // Similar overlap occurs for IEphemeralRecordSystem. IWorldEphemeral is included instead.\n    \"EphemeralRecordSystem\",\n  ],\n});\n"],"mappings":"gGAEA,IAAOA,EAAQC,EAAU,CACvB,gBAAiB,MACjB,kBAAmB,aACnB,mBAAoB,aACpB,iBAAkB,GAClB,OAAQ,CAMN,eAAgB,CACd,UAAW,CACT,UAAW,SACb,EACA,OAAQ,CACN,MAAO,SACT,CACF,EACA,eAAgB,CACd,UAAW,CACT,iBAAkB,UAClB,OAAQ,SACV,EACA,OAAQ,CACN,OAAQ,MACV,CACF,EACA,iBAAkB,CAChB,UAAW,CACT,WAAY,UACZ,cAAe,SACjB,EACA,OAAQ,CACN,cAAe,SACjB,EAKA,WAAY,EACd,EAMA,QAAS,CACP,UAAW,sBACX,UAAW,CACT,iBAAkB,SACpB,EACA,OAAQ,CACN,OAAQ,UACR,aAAc,MAChB,EACA,WAAY,EACd,EACA,eAAgB,CACd,UAAW,sBACX,UAAW,CACT,OAAQ,SACV,EACA,OAAQ,CACN,iBAAkB,SACpB,CACF,EACA,YAAa,CACX,UAAW,sBACX,UAAW,CACT,iBAAkB,SACpB,EACA,OAAQ,WACV,EACA,aAAc,CACZ,UAAW,sBACX,UAAW,CACT,iBAAkB,SACpB,EACA,OAAQ,CACN,aAAc,UAChB,CACF,EACA,kBAAmB,CACjB,UAAW,sBACX,UAAW,CACT,iBAAkB,QACpB,EACA,OAAQ,CACN,UAAW,UACX,KAAM,UACN,uBAAwB,QAC1B,EACA,WAAY,EACd,EACA,cAAe,CACb,UAAW,+BACX,UAAW,CACT,UAAW,SACb,EACA,OAAQ,CACN,cAAe,WACjB,EACA,gBAAiB,EACnB,EACA,YAAa,CACX,UAAW,6BACX,UAAW,CAAE,YAAa,SAAU,EACpC,OAAQ,CACN,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,YACP,MAAO,WACT,CACF,EACA,cAAe,CACb,UAAW,6BACX,UAAW,CACT,YAAa,UACb,SAAU,SACZ,EACA,OAAQ,CAAE,IAAK,OAAQ,MAAO,QAAS,EACvC,WAAY,EACd,EACA,aAAc,CACZ,UAAW,8BACX,UAAW,CAAC,EACZ,OAAQ,UACR,gBAAiB,GACjB,cAAe,EACjB,EAMA,KAAM,CACJ,UAAW,iBACX,UAAW,CAAC,EACZ,OAAQ,CACN,MAAO,MACT,EACA,gBAAiB,EACnB,EACA,aAAc,CACZ,UAAW,iBACX,OAAQ,YACR,gBAAiB,EACnB,CACF,EACA,MAAO,CACL,SAAU,CAAC,OAAQ,YAAa,QAAS,QAAQ,CACnD,EAEA,eAAgB,CAKd,qBAEA,iBASA,0BAEA,uBACF,CACF,CAAC","names":["mud_config_default","mudConfig"]}