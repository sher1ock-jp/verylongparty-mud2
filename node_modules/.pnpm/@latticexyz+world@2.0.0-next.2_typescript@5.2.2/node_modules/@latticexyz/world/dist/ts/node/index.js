import{c as u}from"../../chunk-JOQBBVRS.js";import{renderArguments as c,renderList as y,renderedSolidityHeader as O,renderImports as A}from"@latticexyz/common/codegen";function I(e){let{imports:t,name:i,functionPrefix:o,functions:n,errors:m}=e;return`${O}

${A(t)}

interface ${i} {
  ${y(m,({name:s,parameters:a})=>`error ${s}(${c(a)});`)}

  ${y(n,({name:s,parameters:a,stateMutability:f,returnParameters:r})=>`
    function ${o}${s}(
      ${c(a)}
    ) external ${f} ${D(r)};
  `)}
}

`}function D(e){return e.length>0?`returns (${c(e)})`:""}import{renderArguments as j,renderedSolidityHeader as v,renderAbsoluteImports as C,renderRelativeImports as N}from"@latticexyz/common/codegen";function h(e){let{interfaceName:t,storeImportPath:i,worldImportPath:o,imports:n}=e,m=t==="IBaseWorld"?[{symbol:"IStore",path:`${i}IStore.sol`},{symbol:"IWorldKernel",path:`${o}interfaces/IWorldKernel.sol`},{symbol:"IWorldEphemeral",path:`${o}interfaces/IWorldEphemeral.sol`}]:[{symbol:"IBaseWorld",path:`${o}interfaces/IBaseWorld.sol`}],s=[...m,...n].map(({symbol:a})=>a);return`${v}

${C(m)}

${N(n)}

/**
 * The ${t} interface includes all systems dynamically added to the World
 * during the deploy process.
 */
interface ${t} is ${j(s)} {

}

`}import{readFileSync as B}from"fs";import l from"path";import{formatAndWriteSolidity as $,contractToInterface as E}from"@latticexyz/common/codegen";async function M(e,t,i){let o=u(e,t.map(({basename:r})=>r)),n=l.join(i,e.worldgenDirectory),m=t.filter(({basename:r})=>Object.keys(o.systems).includes(r)),s=[];for(let r of m){let b=B(r.path,"utf8"),{functions:W,errors:P,symbolImports:S}=E(b,r.basename),w=S.map(p=>p.path[0]==="."?{symbol:p.symbol,fromPath:l.join(l.dirname(r.path),p.path),usedInPath:n}:{symbol:p.symbol,path:p.path}),d=`I${r.basename}`,{name:x}=o.systems[r.basename],g=I({name:d,functionPrefix:e.namespace===""?"":`${e.namespace}_${x}_`,functions:W,errors:P,imports:w}),R=l.join(n,d+".sol");await $(g,R,"Generated system interface"),s.push({symbol:d,fromPath:`${d}.sol`,usedInPath:"./"})}let a=h({interfaceName:e.worldInterfaceName,imports:s,storeImportPath:e.storeImportPath,worldImportPath:e.worldImportPath}),f=l.join(n,e.worldInterfaceName+".sol");await $(a,f,"Generated system interface")}export{I as renderSystemInterface,h as renderWorld,M as worldgen};
//# sourceMappingURL=index.js.map