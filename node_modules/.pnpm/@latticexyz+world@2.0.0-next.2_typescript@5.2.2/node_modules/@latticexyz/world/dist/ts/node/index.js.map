{"version":3,"sources":["../../../ts/node/render-solidity/renderSystemInterface.ts","../../../ts/node/render-solidity/renderWorld.ts","../../../ts/node/render-solidity/worldgen.ts"],"sourcesContent":["import { renderArguments, renderList, renderedSolidityHeader, renderImports } from \"@latticexyz/common/codegen\";\nimport { RenderSystemInterfaceOptions } from \"./types\";\n\nexport function renderSystemInterface(options: RenderSystemInterfaceOptions) {\n  const { imports, name, functionPrefix, functions, errors } = options;\n\n  return `${renderedSolidityHeader}\n\n${renderImports(imports)}\n\ninterface ${name} {\n  ${renderList(errors, ({ name, parameters }) => `error ${name}(${renderArguments(parameters)});`)}\n\n  ${renderList(\n    functions,\n    ({ name, parameters, stateMutability, returnParameters }) => `\n    function ${functionPrefix}${name}(\n      ${renderArguments(parameters)}\n    ) external ${stateMutability} ${renderReturnParameters(returnParameters)};\n  `\n  )}\n}\n\n`;\n}\n\nfunction renderReturnParameters(returnParameters: string[]) {\n  if (returnParameters.length > 0) {\n    return `returns (${renderArguments(returnParameters)})`;\n  } else {\n    return \"\";\n  }\n}\n","import {\n  renderArguments,\n  renderedSolidityHeader,\n  renderAbsoluteImports,\n  renderRelativeImports,\n  type AbsoluteImportDatum,\n} from \"@latticexyz/common/codegen\";\nimport type { RenderWorldOptions } from \"./types\";\n\nexport function renderWorld(options: RenderWorldOptions) {\n  const { interfaceName, storeImportPath, worldImportPath, imports } = options;\n  const baseImports: AbsoluteImportDatum[] =\n    interfaceName === \"IBaseWorld\"\n      ? [\n          { symbol: \"IStore\", path: `${storeImportPath}IStore.sol` },\n          { symbol: \"IWorldKernel\", path: `${worldImportPath}interfaces/IWorldKernel.sol` },\n          { symbol: \"IWorldEphemeral\", path: `${worldImportPath}interfaces/IWorldEphemeral.sol` },\n        ]\n      : [\n          {\n            symbol: \"IBaseWorld\",\n            path: `${worldImportPath}interfaces/IBaseWorld.sol`,\n          },\n        ];\n  const importSymbols = [...baseImports, ...imports].map(({ symbol }) => symbol);\n\n  return `${renderedSolidityHeader}\n\n${renderAbsoluteImports(baseImports)}\n\n${renderRelativeImports(imports)}\n\n/**\n * The ${interfaceName} interface includes all systems dynamically added to the World\n * during the deploy process.\n */\ninterface ${interfaceName} is ${renderArguments(importSymbols)} {\n\n}\n\n`;\n}\n","import { readFileSync } from \"fs\";\nimport path from \"path\";\nimport { formatAndWriteSolidity, contractToInterface, type RelativeImportDatum } from \"@latticexyz/common/codegen\";\nimport { StoreConfig } from \"@latticexyz/store\";\nimport { renderSystemInterface } from \"./renderSystemInterface\";\nimport { renderWorld } from \"./renderWorld\";\nimport { resolveWorldConfig, WorldConfig } from \"../../library/config\";\n\nexport async function worldgen(\n  config: StoreConfig & WorldConfig,\n  existingContracts: { path: string; basename: string }[],\n  outputBaseDirectory: string\n) {\n  const resolvedConfig = resolveWorldConfig(\n    config,\n    existingContracts.map(({ basename }) => basename)\n  );\n\n  const worldgenBaseDirectory = path.join(outputBaseDirectory, config.worldgenDirectory);\n  const systems = existingContracts.filter(({ basename }) => Object.keys(resolvedConfig.systems).includes(basename));\n\n  const systemInterfaceImports: RelativeImportDatum[] = [];\n  for (const system of systems) {\n    const data = readFileSync(system.path, \"utf8\");\n    // get external funcions from a contract\n    const { functions, errors, symbolImports } = contractToInterface(data, system.basename);\n    const imports = symbolImports.map((symbolImport) => {\n      if (symbolImport.path[0] === \".\") {\n        // relative import\n        return {\n          symbol: symbolImport.symbol,\n          fromPath: path.join(path.dirname(system.path), symbolImport.path),\n          usedInPath: worldgenBaseDirectory,\n        };\n      } else {\n        // absolute import\n        return {\n          symbol: symbolImport.symbol,\n          path: symbolImport.path,\n        };\n      }\n    });\n    const systemInterfaceName = `I${system.basename}`;\n    // create an interface using the external functions and imports\n    const { name } = resolvedConfig.systems[system.basename];\n    const output = renderSystemInterface({\n      name: systemInterfaceName,\n      functionPrefix: config.namespace === \"\" ? \"\" : `${config.namespace}_${name}_`,\n      functions,\n      errors,\n      imports,\n    });\n    // write to file\n    const fullOutputPath = path.join(worldgenBaseDirectory, systemInterfaceName + \".sol\");\n    await formatAndWriteSolidity(output, fullOutputPath, \"Generated system interface\");\n\n    // prepare imports for IWorld\n    systemInterfaceImports.push({\n      symbol: systemInterfaceName,\n      fromPath: `${systemInterfaceName}.sol`,\n      usedInPath: \"./\",\n    });\n  }\n\n  // render IWorld\n  const output = renderWorld({\n    interfaceName: config.worldInterfaceName,\n    imports: systemInterfaceImports,\n    storeImportPath: config.storeImportPath,\n    worldImportPath: config.worldImportPath,\n  });\n  // write to file\n  const fullOutputPath = path.join(worldgenBaseDirectory, config.worldInterfaceName + \".sol\");\n  await formatAndWriteSolidity(output, fullOutputPath, \"Generated system interface\");\n}\n"],"mappings":"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","names":["renderArguments","renderList","renderedSolidityHeader","renderImports","renderSystemInterface","options","imports","name","functionPrefix","functions","errors","parameters","stateMutability","returnParameters","renderReturnParameters","renderArguments","renderedSolidityHeader","renderAbsoluteImports","renderRelativeImports","renderWorld","options","interfaceName","storeImportPath","worldImportPath","imports","baseImports","importSymbols","symbol","readFileSync","path","formatAndWriteSolidity","contractToInterface","worldgen","config","existingContracts","outputBaseDirectory","resolvedConfig","resolveWorldConfig","basename","worldgenBaseDirectory","path","systems","systemInterfaceImports","system","data","readFileSync","functions","errors","symbolImports","contractToInterface","imports","symbolImport","systemInterfaceName","name","output","renderSystemInterface","fullOutputPath","formatAndWriteSolidity","renderWorld"]}