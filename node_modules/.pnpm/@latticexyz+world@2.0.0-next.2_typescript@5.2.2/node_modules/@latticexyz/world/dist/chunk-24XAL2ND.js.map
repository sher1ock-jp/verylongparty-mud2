{"version":3,"sources":["../ts/register/index.ts","../ts/register/configExtensions.ts","../ts/register/typeExtensions.ts"],"sourcesContent":["// Importing this file has side-effects for MUD config,\n// and the order of imports is important in relation to other plugins\n// (store should usually be the first plugin, followed by world)\n\n// For convenience register and reexport store (which does the same for core config),\n// to reduce the number of needed imports for users\nimport \"@latticexyz/store/register\";\nexport { mudConfig, mudCoreConfig, resolveTableId } from \"@latticexyz/store/register\";\n// Extend core config and types\nimport \"./configExtensions\";\nimport \"./typeExtensions\";\n","import { extendMUDCoreConfig, fromZodErrorCustom } from \"@latticexyz/config\";\nimport { ZodError } from \"zod\";\nimport { zPluginWorldConfig } from \"../library\";\n\nextendMUDCoreConfig((config) => {\n  // This function gets called within mudConfig.\n  // The call order of config extenders depends on the order of their imports.\n  // Any config validation and transformation should be placed here.\n  try {\n    return zPluginWorldConfig.parse(config);\n  } catch (error) {\n    if (error instanceof ZodError) {\n      throw fromZodErrorCustom(error, \"WorldConfig Validation Error\");\n    } else {\n      throw error;\n    }\n  }\n});\n","import { OrDefaults } from \"@latticexyz/common/type-utils\";\nimport { MUDCoreUserConfig } from \"@latticexyz/config\";\nimport { ExpandSystemsConfig, WorldConfig, WorldUserConfig, WORLD_DEFAULTS } from \"../library\";\n\nimport \"@latticexyz/store/register\";\n\n// Inject the plugin options into the core config.\n// Re-exporting an interface of an existing module merges them, adding new options to the interface.\n// (typescript has no way to override types)\ndeclare module \"@latticexyz/config\" {\n  // Extend the user config type, which represents the config as written by the users.\n  // Most things are optional here.\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  export interface MUDCoreUserConfig extends WorldUserConfig {}\n\n  // Also extend the config type, which represents the configuration after it has been resolved.\n  // It should not have any optional properties, with the default values applied instead.\n  // Other plugins may receive this resolved config as their input.\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  export interface MUDCoreConfig extends WorldConfig {}\n}\n\ndeclare module \"@latticexyz/store/register\" {\n  export interface ExpandMUDUserConfig<T extends MUDCoreUserConfig>\n    extends OrDefaults<\n      T,\n      {\n        worldContractName: typeof WORLD_DEFAULTS.worldContractName;\n        worldInterfaceName: typeof WORLD_DEFAULTS.worldInterfaceName;\n        excludeSystems: typeof WORLD_DEFAULTS.excludeSystems;\n        postDeployScript: typeof WORLD_DEFAULTS.postDeployScript;\n        deploysDirectory: typeof WORLD_DEFAULTS.deploysDirectory;\n        worldsFile: typeof WORLD_DEFAULTS.worldsFile;\n        worldgenDirectory: typeof WORLD_DEFAULTS.worldgenDirectory;\n        worldImportPath: typeof WORLD_DEFAULTS.worldImportPath;\n        modules: typeof WORLD_DEFAULTS.modules;\n      }\n    > {\n    systems: ExpandSystemsConfig<T[\"systems\"] extends Record<string, unknown> ? T[\"systems\"] : Record<string, never>>;\n  }\n}\n"],"mappings":"wCAMA,MAAO,6BACP,OAAS,aAAAA,EAAW,iBAAAC,EAAe,kBAAAC,MAAsB,6BCPzD,OAAS,uBAAAC,EAAqB,sBAAAC,MAA0B,qBACxD,OAAS,YAAAC,MAAgB,MAGzBC,EAAqBC,GAAW,CAI9B,GAAI,CACF,OAAOC,EAAmB,MAAMD,CAAM,CACxC,OAASE,EAAP,CACA,MAAIA,aAAiBC,EACbC,EAAmBF,EAAO,8BAA8B,EAExDA,CAEV,CACF,CAAC,ECbD,MAAO","names":["mudConfig","mudCoreConfig","resolveTableId","extendMUDCoreConfig","fromZodErrorCustom","ZodError","extendMUDCoreConfig","config","zPluginWorldConfig","error","ZodError","fromZodErrorCustom"]}