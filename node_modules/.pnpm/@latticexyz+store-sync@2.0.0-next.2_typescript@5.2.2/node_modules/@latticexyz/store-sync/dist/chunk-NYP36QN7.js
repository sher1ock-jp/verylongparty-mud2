import{a as k,d as P}from"./chunk-FDO75HXB.js";import{b as O}from"./chunk-A2BQSIM3.js";import{schemaAbiTypeToDefaultValue as w}from"@latticexyz/schema-type";function j(i){return Object.fromEntries(Object.entries(i).map(([c,p])=>[c,w[p]]))}import{storeEventsAbi as L}from"@latticexyz/store";import{createBlockStream as V,blockRangeToLogs as $,groupLogsByBlockNumber as I}from"@latticexyz/block-logs-stream";import{filter as A,map as R,tap as v,mergeMap as D,from as E,concatMap as F,share as g,firstValueFrom as H}from"rxjs";var a=k.extend("createStoreSync");async function ee({storageAdapter:i,onProgress:c,address:p,publicClient:l,startBlock:u=0n,maxBlockRange:B,initialState:r,indexerUrl:S}){if(S!=null&&r==null)try{let e=O({url:S}),o=l.chain?.id??await l.getChainId();r=await e.findAll.query({chainId:o,address:p})}catch(e){a("couldn't get initial state from indexer",e)}if(r!=null){let{blockNumber:e,tables:o}=r;if(e!=null){a("hydrating from initial state to block",r.blockNumber),u=e+1n,await i.registerTables({blockNumber:e,tables:o});let m=r.tables.reduce((t,f)=>t+f.records.length,0),N=Math.floor(m/100),C=0,d=0;for(let t of r.tables)await i.storeOperations({blockNumber:e,operations:t.records.map(f=>({type:"SetRecord",address:t.address,namespace:t.namespace,name:t.name,key:f.key,value:f.value}))}),C+=t.records.length,d+=t.records.length,d>N&&(d=0,c?.({step:"snapshot",percentage:C/m*100,latestBlockNumber:0n,lastBlockNumberProcessed:e})),a(`hydrated ${t.records.length} records for table ${t.namespace}:${t.name}`)}}a("starting sync from block",u);let b=V({publicClient:l,blockTag:"latest"}).pipe(g()),T=b.pipe(R(e=>e.number),g()),n=null,y=T.pipe(v(e=>{a("latest block number",e),n=e}),R(e=>({startBlock:u,endBlock:e})),$({publicClient:l,address:p,events:L,maxBlockRange:B}),D(({toBlock:e,logs:o})=>E(I(o,e))),g()),s=null,h=y.pipe(F(P(i)),v(({blockNumber:e,operations:o})=>{a("stored",o.length,"operations for block",e),s=e,n!=null&&(e<n?c?.({step:"rpc",percentage:Number(s*1000n/(n*1000n))/100,latestBlockNumber:n,lastBlockNumberProcessed:s}):c?.({step:"live",percentage:100,latestBlockNumber:n,lastBlockNumberProcessed:s}))}),g());async function x(e){let o=await l.waitForTransactionReceipt({hash:e});return(s==null||s<o.blockNumber)&&await H(h.pipe(A(({blockNumber:m})=>m!=null&&m>=o.blockNumber))),{receipt:o}}return{latestBlock$:b,latestBlockNumber$:T,blockLogs$:y,blockStorageOperations$:h,waitForTransaction:x}}export{j as a,ee as b};
//# sourceMappingURL=chunk-NYP36QN7.js.map