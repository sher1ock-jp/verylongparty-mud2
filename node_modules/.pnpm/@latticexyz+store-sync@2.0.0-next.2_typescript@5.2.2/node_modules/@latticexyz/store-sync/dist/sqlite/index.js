import{a as N,b as v}from"../chunk-NYP36QN7.js";import{a as A}from"../chunk-FDO75HXB.js";import"../chunk-A2BQSIM3.js";import{sqliteTable as E}from"drizzle-orm/sqlite-core";import{blob as I,integer as Q,text as w}from"drizzle-orm/sqlite-core";import{assertExhaustive as j}from"@latticexyz/common/utils";import{customType as L}from"drizzle-orm/sqlite-core";import q from"superjson";import{getAddress as $}from"viem";var p=a=>L({dataType(){return"text"},toDriver(n){return q.stringify(n)},fromDriver(n){return q.parse(n)}})(a),g=a=>L({dataType(){return"text"},toDriver(n){return n.toLowerCase()},fromDriver(n){return $(n)}})(a);function b(a,n){switch(n){case"bool":return Q(a,{mode:"boolean"});case"uint8":case"uint16":case"uint24":case"uint32":case"uint40":case"uint48":case"int8":case"int16":case"int24":case"int32":case"int40":case"int48":return Q(a,{mode:"number"});case"uint56":case"uint64":case"uint72":case"uint80":case"uint88":case"uint96":case"uint104":case"uint112":case"uint120":case"uint128":case"uint136":case"uint144":case"uint152":case"uint160":case"uint168":case"uint176":case"uint184":case"uint192":case"uint200":case"uint208":case"uint216":case"uint224":case"uint232":case"uint240":case"uint248":case"uint256":case"int56":case"int64":case"int72":case"int80":case"int88":case"int96":case"int104":case"int112":case"int120":case"int128":case"int136":case"int144":case"int152":case"int160":case"int168":case"int176":case"int184":case"int192":case"int200":case"int208":case"int216":case"int224":case"int232":case"int240":case"int248":case"int256":return I(a,{mode:"bigint"});case"bytes1":case"bytes2":case"bytes3":case"bytes4":case"bytes5":case"bytes6":case"bytes7":case"bytes8":case"bytes9":case"bytes10":case"bytes11":case"bytes12":case"bytes13":case"bytes14":case"bytes15":case"bytes16":case"bytes17":case"bytes18":case"bytes19":case"bytes20":case"bytes21":case"bytes22":case"bytes23":case"bytes24":case"bytes25":case"bytes26":case"bytes27":case"bytes28":case"bytes29":case"bytes30":case"bytes31":case"bytes32":case"bytes":return w(a);case"address":return g(a);case"uint8[]":case"uint16[]":case"uint24[]":case"uint32[]":case"uint40[]":case"uint48[]":case"uint56[]":case"uint64[]":case"uint72[]":case"uint80[]":case"uint88[]":case"uint96[]":case"uint104[]":case"uint112[]":case"uint120[]":case"uint128[]":case"uint136[]":case"uint144[]":case"uint152[]":case"uint160[]":case"uint168[]":case"uint176[]":case"uint184[]":case"uint192[]":case"uint200[]":case"uint208[]":case"uint216[]":case"uint224[]":case"uint232[]":case"uint240[]":case"uint248[]":case"uint256[]":case"int8[]":case"int16[]":case"int24[]":case"int32[]":case"int40[]":case"int48[]":case"int56[]":case"int64[]":case"int72[]":case"int80[]":case"int88[]":case"int96[]":case"int104[]":case"int112[]":case"int120[]":case"int128[]":case"int136[]":case"int144[]":case"int152[]":case"int160[]":case"int168[]":case"int176[]":case"int184[]":case"int192[]":case"int200[]":case"int208[]":case"int216[]":case"int224[]":case"int232[]":case"int240[]":case"int248[]":case"int256[]":case"bytes1[]":case"bytes2[]":case"bytes3[]":case"bytes4[]":case"bytes5[]":case"bytes6[]":case"bytes7[]":case"bytes8[]":case"bytes9[]":case"bytes10[]":case"bytes11[]":case"bytes12[]":case"bytes13[]":case"bytes14[]":case"bytes15[]":case"bytes16[]":case"bytes17[]":case"bytes18[]":case"bytes19[]":case"bytes20[]":case"bytes21[]":case"bytes22[]":case"bytes23[]":case"bytes24[]":case"bytes25[]":case"bytes26[]":case"bytes27[]":case"bytes28[]":case"bytes29[]":case"bytes30[]":case"bytes31[]":case"bytes32[]":case"bool[]":return p(a);case"address[]":return p(a);case"string":return w(a);default:j(n,`Missing SQLite column type for schema ABI type ${n}`)}}import{getAddress as P}from"viem";function y(a,n,r){return`${P(a)}__${n}__${r}`}var F={__key:b("__key","bytes").notNull().primaryKey(),__lastUpdatedBlockNumber:b("__lastUpdatedBlockNumber","uint256").notNull(),__isDeleted:b("__isDeleted","bool").notNull()};function _({address:a,namespace:n,name:r,keySchema:i,valueSchema:s}){let c=y(a,n,r),e=Object.fromEntries(Object.entries(i).map(([u,d])=>[u,b(u,d).notNull()])),t=Object.fromEntries(Object.entries(s).map(([u,d])=>[u,b(u,d).notNull()])),o={...e,...t,...F};return E(c,o)}import{inArray as W}from"drizzle-orm";import{TableId as H}from"@latticexyz/common/deprecated";import{blob as R,integer as k,sqliteTable as K,text as f}from"drizzle-orm/sqlite-core";var T=K("__chainState",{schemaVersion:k("schema_version").notNull().primaryKey(),chainId:k("chainId").notNull().primaryKey(),lastUpdatedBlockNumber:R("last_updated_block_number",{mode:"bigint"}),lastError:f("last_error")}),l=K("__mudStoreTables",{schemaVersion:k("schema_version").primaryKey(),id:f("id").notNull().primaryKey(),address:g("address").notNull(),tableId:f("table_id").notNull(),namespace:f("namespace").notNull(),name:f("name").notNull(),keySchema:p("key_schema").notNull(),valueSchema:p("value_schema").notNull(),lastUpdatedBlockNumber:R("last_updated_block_number",{mode:"bigint"}),lastError:f("last_error")});function D(a,n=[]){let r=Array.from(new Set(n.map(s=>y(s.address,s.namespace,s.name))));return a.select().from(l).where(r.length?W(l.id,r):void 0).all().map(s=>{let c=new H(s.namespace,s.name).toHex();return{id:y(s.address,s.namespace,s.name),address:s.address,tableId:c,namespace:s.namespace,name:s.name,keySchema:s.keySchema,valueSchema:s.valueSchema,lastUpdatedBlockNumber:s.lastUpdatedBlockNumber}})}var B=1;import{concatHex as Z,encodeAbiParameters as ee,getAddress as O}from"viem";import{and as te,eq as C,sql as x}from"drizzle-orm";import{Kysely as J,SqliteDialect as M}from"kysely";import z from"better-sqlite3";import{getTableColumns as G,getTableName as X}from"drizzle-orm";var Y=new J({dialect:new M({database:new z(":memory:")})});function h(a){let n=X(a),r=Y.schema.createTable(n).ifNotExists(),i=Object.values(G(a));for(let e of i)r=r.addColumn(e.name,e.getSQLType(),t=>(e.notNull&&(t=t.notNull()),e.hasDefault&&typeof e.default<"u"&&(t=t.defaultTo(e.default)),t));let s=i.filter(e=>e.primary).map(e=>e.name);s.length&&(r=r.addPrimaryKeyConstraint(`${n}__primaryKey`,s));let{sql:c}=r.compile();return c}import{TableId as ae}from"@latticexyz/common/deprecated";var S=A.extend("sqlite");async function U({database:a,publicClient:n}){let r=n.chain?.id??await n.getChainId();return a.run(x.raw(h(T))),a.run(x.raw(h(l))),{async registerTables({blockNumber:i,tables:s}){await a.transaction(async c=>{for(let e of s){S(`creating table ${e.namespace}:${e.name} for world ${r}:${e.address}`);let t=_({address:e.address,namespace:e.namespace,name:e.name,keySchema:e.keySchema,valueSchema:e.valueSchema});c.run(x.raw(h(t))),c.insert(l).values({schemaVersion:1,id:y(e.address,e.namespace,e.name),address:e.address,tableId:new ae(e.namespace,e.name).toHex(),namespace:e.namespace,name:e.name,keySchema:e.keySchema,valueSchema:e.valueSchema,lastUpdatedBlockNumber:i}).onConflictDoNothing().run()}})},async getTables({tables:i}){return D(a,i)},async storeOperations({blockNumber:i,operations:s}){let c=D(a,Array.from(new Set(s.map(e=>JSON.stringify({address:O(e.address),namespace:e.namespace,name:e.name})))).map(e=>JSON.parse(e)));await a.transaction(async e=>{for(let{address:t,namespace:o,name:m}of c)e.update(l).set({lastUpdatedBlockNumber:i}).where(te(C(l.address,t),C(l.namespace,o),C(l.name,m))).run();for(let t of s){let o=c.find(d=>d.address===O(t.address)&&d.namespace===t.namespace&&d.name===t.name);if(!o){S(`table ${t.namespace}:${t.name} not found, skipping operation`,t);continue}let m=_(o),u=Z(Object.entries(o.keySchema).map(([d,V])=>ee([{type:V}],[t.key[d]])));t.type==="SetRecord"?(S("SetRecord",t),e.insert(m).values({__key:u,__lastUpdatedBlockNumber:i,__isDeleted:!1,...t.key,...t.value}).onConflictDoUpdate({target:m.__key,set:{__lastUpdatedBlockNumber:i,__isDeleted:!1,...t.value}}).run()):t.type==="SetField"?(S("SetField",t),e.insert(m).values({__key:u,__lastUpdatedBlockNumber:i,__isDeleted:!1,...t.key,...N(o.valueSchema),[t.fieldName]:t.fieldValue}).onConflictDoUpdate({target:m.__key,set:{__lastUpdatedBlockNumber:i,__isDeleted:!1,[t.fieldName]:t.fieldValue}}).run()):t.type==="DeleteRecord"&&(S("DeleteRecord",t),e.update(m).set({__lastUpdatedBlockNumber:i,__isDeleted:!0}).where(C(m.__key,u)).run())}e.insert(T).values({schemaVersion:1,chainId:r,lastUpdatedBlockNumber:i}).onConflictDoUpdate({target:[T.schemaVersion,T.chainId],set:{lastUpdatedBlockNumber:i}}).run()})}}}async function Ze({config:a,database:n,publicClient:r,address:i,startBlock:s,maxBlockRange:c,indexerUrl:e,initialState:t}){let o=await v({storageAdapter:await U({database:n,publicClient:r,config:a}),config:a,address:i,publicClient:r,startBlock:s,maxBlockRange:c,indexerUrl:e,initialState:t}),m=o.blockStorageOperations$.subscribe();return{...o,destroy:()=>{m.unsubscribe()}}}export{T as chainState,_ as createSqliteTable,D as getTables,F as metaColumns,l as mudStoreTables,B as schemaVersion,U as sqliteStorage,Ze as syncToSqlite};
//# sourceMappingURL=index.js.map