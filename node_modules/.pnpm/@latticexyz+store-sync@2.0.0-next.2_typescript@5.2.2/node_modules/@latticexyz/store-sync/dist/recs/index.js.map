{"version":3,"sources":["../../src/recs/decodeEntity.ts","../../src/recs/entityToHexKeyTuple.ts","../../src/recs/encodeEntity.ts","../../src/recs/hexKeyTupleToEntity.ts","../../src/recs/isStoreComponent.ts","../../src/recs/debug.ts","../../src/recs/recsStorage.ts","../../src/recs/getTableKey.ts","../../src/recs/singletonEntity.ts","../../src/recs/syncToRecs.ts","../../src/recs/defineInternalComponents.ts","../../src/recs/configToRecsComponents.ts","../../src/recs/schemaAbiTypeToRecsType.ts","../../src/recs/syncStepToMessage.ts"],"sourcesContent":["import { Entity } from \"@latticexyz/recs\";\nimport { StaticAbiType } from \"@latticexyz/schema-type\";\nimport { Hex, decodeAbiParameters } from \"viem\";\nimport { SchemaToPrimitives } from \"@latticexyz/store\";\nimport { entityToHexKeyTuple } from \"./entityToHexKeyTuple\";\n\nexport function decodeEntity<TKeySchema extends Record<string, StaticAbiType>>(\n  keySchema: TKeySchema,\n  entity: Entity\n): SchemaToPrimitives<TKeySchema> {\n  const hexKeyTuple = entityToHexKeyTuple(entity);\n  if (hexKeyTuple.length !== Object.keys(keySchema).length) {\n    throw new Error(\n      `entity key tuple length ${hexKeyTuple.length} does not match key schema length ${Object.keys(keySchema).length}`\n    );\n  }\n  return Object.fromEntries(\n    Object.entries(keySchema).map(([key, type], index) => [\n      key,\n      decodeAbiParameters([{ type }], hexKeyTuple[index] as Hex)[0],\n    ])\n  ) as SchemaToPrimitives<TKeySchema>;\n}\n","import { Entity } from \"@latticexyz/recs\";\nimport { Hex, sliceHex, size, isHex } from \"viem\";\n\nexport function entityToHexKeyTuple(entity: Entity): readonly Hex[] {\n  if (!isHex(entity)) {\n    throw new Error(`entity ${entity} is not a hex string`);\n  }\n  const length = size(entity);\n  if (length % 32 !== 0) {\n    throw new Error(`entity length ${length} is not a multiple of 32 bytes`);\n  }\n  return new Array(length / 32).fill(0).map((_, index) => sliceHex(entity, index * 32, (index + 1) * 32));\n}\n","import { Entity } from \"@latticexyz/recs\";\nimport { StaticAbiType } from \"@latticexyz/schema-type\";\nimport { encodeAbiParameters } from \"viem\";\nimport { SchemaToPrimitives } from \"@latticexyz/store\";\nimport { hexKeyTupleToEntity } from \"./hexKeyTupleToEntity\";\n\nexport function encodeEntity<TKeySchema extends Record<string, StaticAbiType>>(\n  keySchema: TKeySchema,\n  key: SchemaToPrimitives<TKeySchema>\n): Entity {\n  if (Object.keys(keySchema).length !== Object.keys(key).length) {\n    throw new Error(\n      `key length ${Object.keys(key).length} does not match key schema length ${Object.keys(keySchema).length}`\n    );\n  }\n  return hexKeyTupleToEntity(\n    Object.entries(keySchema).map(([keyName, type]) => encodeAbiParameters([{ type }], [key[keyName]]))\n  );\n}\n","import { Entity } from \"@latticexyz/recs\";\nimport { Hex, concatHex } from \"viem\";\n\nexport function hexKeyTupleToEntity(hexKeyTuple: readonly Hex[]): Entity {\n  return concatHex(hexKeyTuple as Hex[]) as Entity;\n}\n","import { Component, Schema } from \"@latticexyz/recs\";\nimport { StoreComponentMetadata } from \"./common\";\n\nexport function isStoreComponent<S extends Schema = Schema>(\n  component: Component<S>\n): component is Component<S, StoreComponentMetadata> {\n  return (\n    component.metadata?.componentName != null &&\n    component.metadata?.tableName != null &&\n    component.metadata?.keySchema != null &&\n    component.metadata?.valueSchema != null\n  );\n}\n","import { debug as parentDebug } from \"../debug\";\n\nexport const debug = parentDebug.extend(\"recs\");\n","import { BlockLogsToStorageOptions } from \"../blockLogsToStorage\";\nimport { StoreConfig } from \"@latticexyz/store\";\nimport { debug } from \"./debug\";\nimport {\n  ComponentValue,\n  Entity,\n  Component as RecsComponent,\n  Schema as RecsSchema,\n  getComponentValue,\n  removeComponent,\n  setComponent,\n  updateComponent,\n} from \"@latticexyz/recs\";\nimport { isDefined } from \"@latticexyz/common/utils\";\nimport { schemaToDefaults } from \"../schemaToDefaults\";\nimport { defineInternalComponents } from \"./defineInternalComponents\";\nimport { getTableKey } from \"./getTableKey\";\nimport { StoreComponentMetadata } from \"./common\";\nimport { tableIdToHex } from \"@latticexyz/common\";\nimport { encodeEntity } from \"./encodeEntity\";\n\nexport function recsStorage<TConfig extends StoreConfig = StoreConfig>({\n  components,\n}: {\n  components: ReturnType<typeof defineInternalComponents> &\n    Record<string, RecsComponent<RecsSchema, StoreComponentMetadata>>;\n  config?: TConfig;\n}): BlockLogsToStorageOptions<TConfig> {\n  // TODO: do we need to store block number?\n\n  const componentsByTableId = Object.fromEntries(\n    Object.entries(components).map(([id, component]) => [component.id, component])\n  );\n\n  return {\n    async registerTables({ tables }) {\n      for (const table of tables) {\n        // TODO: check if table exists already and skip/warn?\n        setComponent(components.TableMetadata, getTableKey(table) as Entity, { table });\n      }\n    },\n    async getTables({ tables }) {\n      // TODO: fetch schema from RPC if table not found?\n      return tables\n        .map((table) => getComponentValue(components.TableMetadata, getTableKey(table) as Entity)?.table)\n        .filter(isDefined);\n    },\n    async storeOperations({ operations }) {\n      for (const operation of operations) {\n        const table = getComponentValue(\n          components.TableMetadata,\n          getTableKey({\n            address: operation.address,\n            namespace: operation.namespace,\n            name: operation.name,\n          }) as Entity\n        )?.table;\n        if (!table) {\n          debug(`skipping update for unknown table: ${operation.namespace}:${operation.name} at ${operation.address}`);\n          continue;\n        }\n\n        const tableId = tableIdToHex(operation.namespace, operation.name);\n        const component = componentsByTableId[tableId];\n        if (!component) {\n          debug(`skipping update for unknown component: ${tableId}. Available components: ${Object.keys(components)}`);\n          continue;\n        }\n\n        const entity = encodeEntity(table.keySchema, operation.key);\n\n        if (operation.type === \"SetRecord\") {\n          debug(\"setting component\", tableId, entity, operation.value);\n          setComponent(component, entity, operation.value as ComponentValue);\n        } else if (operation.type === \"SetField\") {\n          debug(\"updating component\", tableId, entity, {\n            [operation.fieldName]: operation.fieldValue,\n          });\n          updateComponent(\n            component,\n            entity,\n            { [operation.fieldName]: operation.fieldValue } as ComponentValue,\n            schemaToDefaults(table.valueSchema) as ComponentValue\n          );\n        } else if (operation.type === \"DeleteRecord\") {\n          debug(\"deleting component\", tableId, entity);\n          removeComponent(component, entity);\n        }\n      }\n    },\n  } as BlockLogsToStorageOptions<TConfig>;\n}\n","import { Address, getAddress } from \"viem\";\nimport { Table, TableName, TableNamespace } from \"../common\";\n\nexport type TableKey = `${Address}:${TableNamespace}:${TableName}`;\n\nexport function getTableKey(table: Pick<Table, \"address\" | \"namespace\" | \"name\">): TableKey {\n  return `${getAddress(table.address)}:${table.namespace}:${table.name}`;\n}\n","import { hexKeyTupleToEntity } from \"./hexKeyTupleToEntity\";\n\nexport const singletonEntity = hexKeyTupleToEntity([]);\n","import { StoreConfig } from \"@latticexyz/store\";\nimport { World as RecsWorld, setComponent } from \"@latticexyz/recs\";\nimport { SyncOptions, SyncResult } from \"../common\";\nimport { recsStorage } from \"./recsStorage\";\nimport { defineInternalComponents } from \"./defineInternalComponents\";\nimport { createStoreSync } from \"../createStoreSync\";\nimport { ConfigToRecsComponents } from \"./common\";\nimport storeConfig from \"@latticexyz/store/mud.config\";\nimport worldConfig from \"@latticexyz/world/mud.config\";\nimport { configToRecsComponents } from \"./configToRecsComponents\";\nimport { singletonEntity } from \"./singletonEntity\";\nimport { syncStepToMessage } from \"./syncStepToMessage\";\n\ntype SyncToRecsOptions<TConfig extends StoreConfig = StoreConfig> = SyncOptions<TConfig> & {\n  world: RecsWorld;\n  config: TConfig;\n};\n\ntype SyncToRecsResult<TConfig extends StoreConfig = StoreConfig> = SyncResult<TConfig> & {\n  // TODO: return publicClient?\n  components: ConfigToRecsComponents<TConfig> &\n    ConfigToRecsComponents<typeof storeConfig> &\n    ConfigToRecsComponents<typeof worldConfig> &\n    ReturnType<typeof defineInternalComponents>;\n};\n\nexport async function syncToRecs<TConfig extends StoreConfig = StoreConfig>({\n  world,\n  config,\n  address,\n  publicClient,\n  startBlock,\n  maxBlockRange,\n  initialState,\n  indexerUrl,\n}: SyncToRecsOptions<TConfig>): Promise<SyncToRecsResult<TConfig>> {\n  const components = {\n    ...configToRecsComponents(world, config),\n    ...configToRecsComponents(world, storeConfig),\n    ...configToRecsComponents(world, worldConfig),\n    ...defineInternalComponents(world),\n  };\n\n  world.registerEntity({ id: singletonEntity });\n\n  const storeSync = await createStoreSync({\n    storageAdapter: recsStorage({ components, config }),\n    config,\n    address,\n    publicClient,\n    startBlock,\n    maxBlockRange,\n    indexerUrl,\n    initialState,\n    onProgress: ({ step, percentage, latestBlockNumber, lastBlockNumberProcessed }) => {\n      console.log(\"got progress\", step, percentage);\n      // TODO: stop updating once live?\n      setComponent(components.SyncProgress, singletonEntity, {\n        step,\n        percentage,\n        latestBlockNumber,\n        lastBlockNumberProcessed,\n        message: syncStepToMessage(step),\n      });\n    },\n  });\n\n  const sub = storeSync.blockStorageOperations$.subscribe();\n  world.registerDisposer(() => sub.unsubscribe());\n\n  return {\n    ...storeSync,\n    components,\n  };\n}\n","import { World, defineComponent, Type, Component, Schema, Metadata } from \"@latticexyz/recs\";\nimport { Table } from \"../common\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function defineInternalComponents(world: World) {\n  return {\n    TableMetadata: defineComponent<{ table: Type.T }, Metadata, Table>(\n      world,\n      { table: Type.T },\n      { metadata: { componentName: \"TableMetadata\" } }\n    ),\n    SyncProgress: defineComponent(\n      world,\n      {\n        step: Type.String,\n        message: Type.String,\n        percentage: Type.Number,\n        latestBlockNumber: Type.BigInt,\n        lastBlockNumberProcessed: Type.BigInt,\n      },\n      { metadata: { componentName: \"SyncProgress\" } }\n    ),\n  } as const satisfies Record<string, Component<Schema, Metadata>>;\n}\n","import { StoreConfig } from \"@latticexyz/store\";\nimport { SchemaAbiType } from \"@latticexyz/schema-type\";\nimport { tableIdToHex } from \"@latticexyz/common\";\nimport { World, defineComponent } from \"@latticexyz/recs\";\nimport { ConfigToRecsComponents } from \"./common\";\nimport { schemaAbiTypeToRecsType } from \"./schemaAbiTypeToRecsType\";\n\nexport function configToRecsComponents<TConfig extends StoreConfig>(\n  world: World,\n  config: TConfig\n): ConfigToRecsComponents<TConfig> {\n  return Object.fromEntries(\n    Object.entries(config.tables).map(([tableName, table]) => [\n      tableName,\n      defineComponent(\n        world,\n        Object.fromEntries(\n          Object.entries(table.schema).map(([fieldName, schemaAbiType]) => [\n            fieldName,\n            schemaAbiTypeToRecsType[schemaAbiType as SchemaAbiType],\n          ])\n        ),\n        {\n          id: tableIdToHex(config.namespace, tableName),\n          metadata: {\n            componentName: tableName,\n            tableName: `${config.namespace}:${tableName}`,\n            keySchema: table.keySchema,\n            valueSchema: table.schema,\n          },\n        }\n      ),\n    ])\n  ) as ConfigToRecsComponents<TConfig>;\n}\n","import { Type as RecsType } from \"@latticexyz/recs\";\nimport { SchemaAbiType } from \"@latticexyz/schema-type\";\n\nexport const schemaAbiTypeToRecsType = {\n  uint8: RecsType.Number,\n  uint16: RecsType.Number,\n  uint24: RecsType.Number,\n  uint32: RecsType.Number,\n  uint40: RecsType.Number,\n  uint48: RecsType.Number,\n  uint56: RecsType.BigInt,\n  uint64: RecsType.BigInt,\n  uint72: RecsType.BigInt,\n  uint80: RecsType.BigInt,\n  uint88: RecsType.BigInt,\n  uint96: RecsType.BigInt,\n  uint104: RecsType.BigInt,\n  uint112: RecsType.BigInt,\n  uint120: RecsType.BigInt,\n  uint128: RecsType.BigInt,\n  uint136: RecsType.BigInt,\n  uint144: RecsType.BigInt,\n  uint152: RecsType.BigInt,\n  uint160: RecsType.BigInt,\n  uint168: RecsType.BigInt,\n  uint176: RecsType.BigInt,\n  uint184: RecsType.BigInt,\n  uint192: RecsType.BigInt,\n  uint200: RecsType.BigInt,\n  uint208: RecsType.BigInt,\n  uint216: RecsType.BigInt,\n  uint224: RecsType.BigInt,\n  uint232: RecsType.BigInt,\n  uint240: RecsType.BigInt,\n  uint248: RecsType.BigInt,\n  uint256: RecsType.BigInt,\n  int8: RecsType.Number,\n  int16: RecsType.Number,\n  int24: RecsType.Number,\n  int32: RecsType.Number,\n  int40: RecsType.Number,\n  int48: RecsType.Number,\n  int56: RecsType.BigInt,\n  int64: RecsType.BigInt,\n  int72: RecsType.BigInt,\n  int80: RecsType.BigInt,\n  int88: RecsType.BigInt,\n  int96: RecsType.BigInt,\n  int104: RecsType.BigInt,\n  int112: RecsType.BigInt,\n  int120: RecsType.BigInt,\n  int128: RecsType.BigInt,\n  int136: RecsType.BigInt,\n  int144: RecsType.BigInt,\n  int152: RecsType.BigInt,\n  int160: RecsType.BigInt,\n  int168: RecsType.BigInt,\n  int176: RecsType.BigInt,\n  int184: RecsType.BigInt,\n  int192: RecsType.BigInt,\n  int200: RecsType.BigInt,\n  int208: RecsType.BigInt,\n  int216: RecsType.BigInt,\n  int224: RecsType.BigInt,\n  int232: RecsType.BigInt,\n  int240: RecsType.BigInt,\n  int248: RecsType.BigInt,\n  int256: RecsType.BigInt,\n  bytes1: RecsType.String,\n  bytes2: RecsType.String,\n  bytes3: RecsType.String,\n  bytes4: RecsType.String,\n  bytes5: RecsType.String,\n  bytes6: RecsType.String,\n  bytes7: RecsType.String,\n  bytes8: RecsType.String,\n  bytes9: RecsType.String,\n  bytes10: RecsType.String,\n  bytes11: RecsType.String,\n  bytes12: RecsType.String,\n  bytes13: RecsType.String,\n  bytes14: RecsType.String,\n  bytes15: RecsType.String,\n  bytes16: RecsType.String,\n  bytes17: RecsType.String,\n  bytes18: RecsType.String,\n  bytes19: RecsType.String,\n  bytes20: RecsType.String,\n  bytes21: RecsType.String,\n  bytes22: RecsType.String,\n  bytes23: RecsType.String,\n  bytes24: RecsType.String,\n  bytes25: RecsType.String,\n  bytes26: RecsType.String,\n  bytes27: RecsType.String,\n  bytes28: RecsType.String,\n  bytes29: RecsType.String,\n  bytes30: RecsType.String,\n  bytes31: RecsType.String,\n  bytes32: RecsType.String,\n  bool: RecsType.Boolean,\n  address: RecsType.String,\n  \"uint8[]\": RecsType.NumberArray,\n  \"uint16[]\": RecsType.NumberArray,\n  \"uint24[]\": RecsType.NumberArray,\n  \"uint32[]\": RecsType.NumberArray,\n  \"uint40[]\": RecsType.NumberArray,\n  \"uint48[]\": RecsType.NumberArray,\n  \"uint56[]\": RecsType.BigIntArray,\n  \"uint64[]\": RecsType.BigIntArray,\n  \"uint72[]\": RecsType.BigIntArray,\n  \"uint80[]\": RecsType.BigIntArray,\n  \"uint88[]\": RecsType.BigIntArray,\n  \"uint96[]\": RecsType.BigIntArray,\n  \"uint104[]\": RecsType.BigIntArray,\n  \"uint112[]\": RecsType.BigIntArray,\n  \"uint120[]\": RecsType.BigIntArray,\n  \"uint128[]\": RecsType.BigIntArray,\n  \"uint136[]\": RecsType.BigIntArray,\n  \"uint144[]\": RecsType.BigIntArray,\n  \"uint152[]\": RecsType.BigIntArray,\n  \"uint160[]\": RecsType.BigIntArray,\n  \"uint168[]\": RecsType.BigIntArray,\n  \"uint176[]\": RecsType.BigIntArray,\n  \"uint184[]\": RecsType.BigIntArray,\n  \"uint192[]\": RecsType.BigIntArray,\n  \"uint200[]\": RecsType.BigIntArray,\n  \"uint208[]\": RecsType.BigIntArray,\n  \"uint216[]\": RecsType.BigIntArray,\n  \"uint224[]\": RecsType.BigIntArray,\n  \"uint232[]\": RecsType.BigIntArray,\n  \"uint240[]\": RecsType.BigIntArray,\n  \"uint248[]\": RecsType.BigIntArray,\n  \"uint256[]\": RecsType.BigIntArray,\n  \"int8[]\": RecsType.NumberArray,\n  \"int16[]\": RecsType.NumberArray,\n  \"int24[]\": RecsType.NumberArray,\n  \"int32[]\": RecsType.NumberArray,\n  \"int40[]\": RecsType.NumberArray,\n  \"int48[]\": RecsType.NumberArray,\n  \"int56[]\": RecsType.BigIntArray,\n  \"int64[]\": RecsType.BigIntArray,\n  \"int72[]\": RecsType.BigIntArray,\n  \"int80[]\": RecsType.BigIntArray,\n  \"int88[]\": RecsType.BigIntArray,\n  \"int96[]\": RecsType.BigIntArray,\n  \"int104[]\": RecsType.BigIntArray,\n  \"int112[]\": RecsType.BigIntArray,\n  \"int120[]\": RecsType.BigIntArray,\n  \"int128[]\": RecsType.BigIntArray,\n  \"int136[]\": RecsType.BigIntArray,\n  \"int144[]\": RecsType.BigIntArray,\n  \"int152[]\": RecsType.BigIntArray,\n  \"int160[]\": RecsType.BigIntArray,\n  \"int168[]\": RecsType.BigIntArray,\n  \"int176[]\": RecsType.BigIntArray,\n  \"int184[]\": RecsType.BigIntArray,\n  \"int192[]\": RecsType.BigIntArray,\n  \"int200[]\": RecsType.BigIntArray,\n  \"int208[]\": RecsType.BigIntArray,\n  \"int216[]\": RecsType.BigIntArray,\n  \"int224[]\": RecsType.BigIntArray,\n  \"int232[]\": RecsType.BigIntArray,\n  \"int240[]\": RecsType.BigIntArray,\n  \"int248[]\": RecsType.BigIntArray,\n  \"int256[]\": RecsType.BigIntArray,\n  \"bytes1[]\": RecsType.StringArray,\n  \"bytes2[]\": RecsType.StringArray,\n  \"bytes3[]\": RecsType.StringArray,\n  \"bytes4[]\": RecsType.StringArray,\n  \"bytes5[]\": RecsType.StringArray,\n  \"bytes6[]\": RecsType.StringArray,\n  \"bytes7[]\": RecsType.StringArray,\n  \"bytes8[]\": RecsType.StringArray,\n  \"bytes9[]\": RecsType.StringArray,\n  \"bytes10[]\": RecsType.StringArray,\n  \"bytes11[]\": RecsType.StringArray,\n  \"bytes12[]\": RecsType.StringArray,\n  \"bytes13[]\": RecsType.StringArray,\n  \"bytes14[]\": RecsType.StringArray,\n  \"bytes15[]\": RecsType.StringArray,\n  \"bytes16[]\": RecsType.StringArray,\n  \"bytes17[]\": RecsType.StringArray,\n  \"bytes18[]\": RecsType.StringArray,\n  \"bytes19[]\": RecsType.StringArray,\n  \"bytes20[]\": RecsType.StringArray,\n  \"bytes21[]\": RecsType.StringArray,\n  \"bytes22[]\": RecsType.StringArray,\n  \"bytes23[]\": RecsType.StringArray,\n  \"bytes24[]\": RecsType.StringArray,\n  \"bytes25[]\": RecsType.StringArray,\n  \"bytes26[]\": RecsType.StringArray,\n  \"bytes27[]\": RecsType.StringArray,\n  \"bytes28[]\": RecsType.StringArray,\n  \"bytes29[]\": RecsType.StringArray,\n  \"bytes30[]\": RecsType.StringArray,\n  \"bytes31[]\": RecsType.StringArray,\n  \"bytes32[]\": RecsType.StringArray,\n  \"bool[]\": RecsType.T, // no boolean arr,\n  \"address[]\": RecsType.StringArray,\n  bytes: RecsType.String,\n  string: RecsType.String,\n} as const satisfies Record<SchemaAbiType, RecsType>;\n\nexport type SchemaAbiTypeToRecsType<T extends SchemaAbiType> = (typeof schemaAbiTypeToRecsType)[T];\n","import { SyncStep } from \"../SyncStep\";\nimport { assertExhaustive } from \"@latticexyz/common/utils\";\n\nexport function syncStepToMessage(step: SyncStep): string {\n  switch (step) {\n    case SyncStep.INITIALIZE:\n      return \"Connecting\";\n    case SyncStep.SNAPSHOT:\n      return \"Hydrating from snapshot\";\n    case SyncStep.RPC:\n      return \"Hydrating from RPC\";\n    case SyncStep.LIVE:\n      return \"All caught up!\";\n    default:\n      assertExhaustive(step, `Unexpected sync step: ${step}`);\n  }\n}\n"],"mappings":"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ClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,KAAMA,EAAS,OACf,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,E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","names":["decodeAbiParameters","sliceHex","size","isHex","entityToHexKeyTuple","entity","length","_","index","decodeEntity","keySchema","entity","hexKeyTuple","entityToHexKeyTuple","key","type","index","decodeAbiParameters","encodeAbiParameters","concatHex","hexKeyTupleToEntity","hexKeyTuple","encodeEntity","keySchema","key","hexKeyTupleToEntity","keyName","type","encodeAbiParameters","isStoreComponent","component","debug","getComponentValue","removeComponent","setComponent","updateComponent","isDefined","getAddress","getTableKey","table","tableIdToHex","recsStorage","components","componentsByTableId","id","component","tables","table","setComponent","getTableKey","getComponentValue","isDefined","operations","operation","debug","tableId","tableIdToHex","entity","encodeEntity","updateComponent","schemaToDefaults","removeComponent","singletonEntity","hexKeyTupleToEntity","setComponent","defineComponent","Type","defineInternalComponents","world","storeConfig","worldConfig","tableIdToHex","defineComponent","RecsType","schemaAbiTypeToRecsType","configToRecsComponents","world","config","tableName","table","defineComponent","fieldName","schemaAbiType","schemaAbiTypeToRecsType","tableIdToHex","assertExhaustive","syncStepToMessage","step","syncToRecs","world","config","address","publicClient","startBlock","maxBlockRange","initialState","indexerUrl","components","configToRecsComponents","storeConfig","worldConfig","defineInternalComponents","singletonEntity","storeSync","createStoreSync","recsStorage","step","percentage","latestBlockNumber","lastBlockNumberProcessed","setComponent","syncStepToMessage","sub"]}